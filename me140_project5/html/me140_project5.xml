<?xml version="1.0" encoding="utf-8"?>
<mscript xmlns:mwsh="http://www.mathworks.com/namespace/mcode/v1/syntaxhighlight.dtd">
   <version>9.0</version>
   <release>2016a</release>
   <date>2016-05-05</date>
   <cell>
      <count>1</count>
      <mcode>% ME 140 Project #5
% FUEL CELL EVALUATION &amp; HYRDOGEN PRODUCTION ANALYSIS
% Frankie Willcox, Jon Renslo, Kendall Fagan, Emily Bohl, Natasha Berk

%Jon's todo list
% double check power loss (inefficiencies)
% ask about starting from STP (extra methane used?)

% ASSUME:
% (i)  mol_H2 = 1
clear; close all; clc;
format compact;
entireTime = tic;

global PERMIN_TO_PERSEC PERHR_TO_PERSEC G_PER_KG LHV F N_TO_O SCF_TO_MOLS ...
    C_TO_K PSI_TO_PA MM_h MM_h2 MM_o MM_n MM_ch4 MM_h2o MM_air PATM HORSEPOWER_TO_W
defineGlobals();
mol_H2 = 1;
savePlots = 0;
                % 1,2,3,4,5,6,7,8,9,10,11

supressplots =   [1,      1,    1,  1];         % supresses plots by section</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve"><mwsh:comments xml:space="preserve">% ME 140 Project #5</mwsh:comments><mwsh:comments xml:space="preserve">% FUEL CELL EVALUATION &amp; HYRDOGEN PRODUCTION ANALYSIS</mwsh:comments><mwsh:comments xml:space="preserve">% Frankie Willcox, Jon Renslo, Kendall Fagan, Emily Bohl, Natasha Berk</mwsh:comments>
<mwsh:comments xml:space="preserve">%Jon's todo list</mwsh:comments><mwsh:comments xml:space="preserve">% double check power loss (inefficiencies)</mwsh:comments><mwsh:comments xml:space="preserve">% ask about starting from STP (extra methane used?)</mwsh:comments>
<mwsh:comments xml:space="preserve">% ASSUME:</mwsh:comments><mwsh:comments xml:space="preserve">% (i)  mol_H2 = 1</mwsh:comments>
clear; close <mwsh:strings xml:space="preserve">all</mwsh:strings>; clc;
format <mwsh:strings xml:space="preserve">compact</mwsh:strings>;
entireTime = tic;

<mwsh:keywords xml:space="preserve">global</mwsh:keywords> PERMIN_TO_PERSEC PERHR_TO_PERSEC G_PER_KG LHV F N_TO_O SCF_TO_MOLS <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
    C_TO_K PSI_TO_PA MM_h MM_h2 MM_o MM_n MM_ch4 MM_h2o MM_air PATM HORSEPOWER_TO_W
defineGlobals();
mol_H2 = 1;
savePlots = 0;
                <mwsh:comments xml:space="preserve">% 1,2,3,4,5,6,7,8,9,10,11</mwsh:comments>

supressplots =   [1,      1,    1,  1];         <mwsh:comments xml:space="preserve">% supresses plots by section</mwsh:comments></mwsh:code></mcode-xmlized>
      <mcode-count>1</mcode-count>
      <cellOutputTarget>1</cellOutputTarget>
   </cell>
   <cell>
      <count>2</count>
      <steptitle>Part A, Section 1</steptitle>
      <text>
         <p>Currents (load &amp; stack)</p>
      </text>
      <mcode>i_load =  [0.00 15.06 27.25 36.48 45.1 52.1 56.3 57.6 56.4];       % [Amps]
i_stack = [4.82 21.40 35.65 47.20 59.8 69.7 77.0 79.0 80.0];


% Potentials (load &amp; stack)
v_load =  [17.07 15.05 14.08 13.10 12.07 11.27 10.31 9.87  9.05 ]; % [Volts]
v_stack = [17.09 15.22 14.26 12.98 12.42 11.60 10.73 10.21 9.48];


% Temperatures from Thermocouple Readings [C]
% KEY: (Kendall please fill in with photo you took)
T1_C = [42.8 42.9 46.1 48.5 50.5 52.8 54.8 55.8 56.5];
T2_C =     [42.5 45.8 45.8 48.4 50.3 51.9 53.3 53.9 54.3];
Tstack_C = [40.7 41.3 42.5 42.9 44.6 45.6 46.9 46.9 47.6];

T1 = T1_C + C_TO_K;                                                % [K],  T1, air into stack
T2 = T2_C + C_TO_K;                                                % [K],  T2, air out of stack
Tstack = Tstack_C + C_TO_K;                                        % [K],  metal plates on the stack

% NOTE: T3-T5 are not needed for now
% T3_C =     [48.0 47.1 48.6 48.9 50.4 51.1 51.2 51.1 51.1];       % T3, water reservoir DON'T USE!
% T3 = T3_C + C_TO_K;
T4_C =     [48.0 47.2 48.2 48.9 50.4 51.1 51.2 51.1 51.1];
T5_C =     [40.7 41.3 42.5 42.9 44.6 45.6 46.9 46.9 47.6];
T4 = T4_C + C_TO_K;                                                % T4, water into stack
T5 = T5_C + C_TO_K;                                                % T5, water into heat exchanger


% Mass Flow Rates (TODO: check what units the mdots should be in)
mdot_total_scf = [0.75 1.10 1.45 1.81 2.55 3.10 3.30 3.25 3.40];   % [scf/min]
mdot_fuel_scf =  [2.50 6.20 10.5 14.3 18.2 22.0 24.6 25.0 26.1];   % [scf/hr] (standard cubic feet/hour)

mdot_total = mdot_total_scf * SCF_TO_MOLS * PERMIN_TO_PERSEC * ( MM_air / G_PER_KG);  % [kg/s]
mdot_fuel = mdot_fuel_scf * SCF_TO_MOLS * PERHR_TO_PERSEC * (MM_h2  / G_PER_KG);      % [kg/s]
mdot_h2o = 40 /G_PER_KG;                                                              % [kg/s]

% Pressures
Pfuel_psi =  [2.9 2.9 3.1 3.3 3.30 3.20 3.00 3.0 3.1];              % [psi] (gauge)
Ptotal_psi = [0.2 0.3 0.6 0.7 1.15 1.25 1.35 1.3 1.5];              % [psi] (gauge), pressure of combined air and H2O after humidifier
Pfuel =  Pfuel_psi  .* PSI_TO_PA + PATM;                            % [Pa]
Ptotal = Ptotal_psi .* PSI_TO_PA + PATM;                            % [Pa]

% CALCULATIONS
% ------------
% Power (USE: p = i*v)
% NOTE: "Accessories" include H2O pump, air pump, H2 vent, &amp; controller
p_load =  i_load  .* v_load;                                        % [W] = [kg*m^2*s^-3], a.k.a. "load" (power delivered to resistor bank)
p_stack = i_stack .* v_stack;
p_access = p_stack - p_load;                                        % [W], Acessory Power, i.e. power used to run controls. Pstack-Pload
if(~supressplots(1))
    hold off;
    f1 = figure(1);
    plot(p_load,i_load,p_load,i_stack);
    title('Current as a Function of Load');
    xlabel('Load [Watts]'); ylabel('Current [Amps]');
    legend('I_{load}','I_{stack}','Location','best'); grid on;

    f2 = figure(2);
    plot(p_load,v_load,p_load,v_stack);
    title('Potential as a Function of Load');
    xlabel('Load [Watts]'); ylabel('Potential [Volts]');
    legend('V_{load}','V_{stack}','Location','best'); grid on;

    f3 = figure(3);
    plot(p_load,p_stack,p_load,p_access);
    title('Stack and Accessory Power as a Function of Load');
    xlabel('Load [Watts]'); ylabel('Power [Watts]');
    text(5,50,'Net Power = 0 @ 0 Load');
    legend('P_{stack}','P_{accessory}','Location','best'); grid on;

    f4 = figure(4);
    plot(p_load, mdot_fuel*100, p_load, mdot_total);
    title('Mass Flow Rate as a Function of Load');
    xlabel('Load [Watts]'); ylabel('Mass Flow Rate [kg/s]');
    legend('mdot_{H}*100','mdot_{air}','Location','best'); grid on;

end</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">i_load =  [0.00 15.06 27.25 36.48 45.1 52.1 56.3 57.6 56.4];       <mwsh:comments xml:space="preserve">% [Amps]</mwsh:comments>
i_stack = [4.82 21.40 35.65 47.20 59.8 69.7 77.0 79.0 80.0];


<mwsh:comments xml:space="preserve">% Potentials (load &amp; stack)</mwsh:comments>
v_load =  [17.07 15.05 14.08 13.10 12.07 11.27 10.31 9.87  9.05 ]; <mwsh:comments xml:space="preserve">% [Volts]</mwsh:comments>
v_stack = [17.09 15.22 14.26 12.98 12.42 11.60 10.73 10.21 9.48];


<mwsh:comments xml:space="preserve">% Temperatures from Thermocouple Readings [C]</mwsh:comments><mwsh:comments xml:space="preserve">% KEY: (Kendall please fill in with photo you took)</mwsh:comments>
T1_C = [42.8 42.9 46.1 48.5 50.5 52.8 54.8 55.8 56.5];
T2_C =     [42.5 45.8 45.8 48.4 50.3 51.9 53.3 53.9 54.3];
Tstack_C = [40.7 41.3 42.5 42.9 44.6 45.6 46.9 46.9 47.6];

T1 = T1_C + C_TO_K;                                                <mwsh:comments xml:space="preserve">% [K],  T1, air into stack</mwsh:comments>
T2 = T2_C + C_TO_K;                                                <mwsh:comments xml:space="preserve">% [K],  T2, air out of stack</mwsh:comments>
Tstack = Tstack_C + C_TO_K;                                        <mwsh:comments xml:space="preserve">% [K],  metal plates on the stack</mwsh:comments>
<mwsh:comments xml:space="preserve">% NOTE: T3-T5 are not needed for now</mwsh:comments><mwsh:comments xml:space="preserve">% T3_C =     [48.0 47.1 48.6 48.9 50.4 51.1 51.2 51.1 51.1];       % T3, water reservoir DON'T USE!</mwsh:comments><mwsh:comments xml:space="preserve">% T3 = T3_C + C_TO_K;</mwsh:comments>
T4_C =     [48.0 47.2 48.2 48.9 50.4 51.1 51.2 51.1 51.1];
T5_C =     [40.7 41.3 42.5 42.9 44.6 45.6 46.9 46.9 47.6];
T4 = T4_C + C_TO_K;                                                <mwsh:comments xml:space="preserve">% T4, water into stack</mwsh:comments>
T5 = T5_C + C_TO_K;                                                <mwsh:comments xml:space="preserve">% T5, water into heat exchanger</mwsh:comments>

<mwsh:comments xml:space="preserve">% Mass Flow Rates (TODO: check what units the mdots should be in)</mwsh:comments>
mdot_total_scf = [0.75 1.10 1.45 1.81 2.55 3.10 3.30 3.25 3.40];   <mwsh:comments xml:space="preserve">% [scf/min]</mwsh:comments>
mdot_fuel_scf =  [2.50 6.20 10.5 14.3 18.2 22.0 24.6 25.0 26.1];   <mwsh:comments xml:space="preserve">% [scf/hr] (standard cubic feet/hour)</mwsh:comments>

mdot_total = mdot_total_scf * SCF_TO_MOLS * PERMIN_TO_PERSEC * ( MM_air / G_PER_KG);  <mwsh:comments xml:space="preserve">% [kg/s]</mwsh:comments>
mdot_fuel = mdot_fuel_scf * SCF_TO_MOLS * PERHR_TO_PERSEC * (MM_h2  / G_PER_KG);      <mwsh:comments xml:space="preserve">% [kg/s]</mwsh:comments>
mdot_h2o = 40 /G_PER_KG;                                                              <mwsh:comments xml:space="preserve">% [kg/s]</mwsh:comments>
<mwsh:comments xml:space="preserve">% Pressures</mwsh:comments>
Pfuel_psi =  [2.9 2.9 3.1 3.3 3.30 3.20 3.00 3.0 3.1];              <mwsh:comments xml:space="preserve">% [psi] (gauge)</mwsh:comments>
Ptotal_psi = [0.2 0.3 0.6 0.7 1.15 1.25 1.35 1.3 1.5];              <mwsh:comments xml:space="preserve">% [psi] (gauge), pressure of combined air and H2O after humidifier</mwsh:comments>
Pfuel =  Pfuel_psi  .* PSI_TO_PA + PATM;                            <mwsh:comments xml:space="preserve">% [Pa]</mwsh:comments>
Ptotal = Ptotal_psi .* PSI_TO_PA + PATM;                            <mwsh:comments xml:space="preserve">% [Pa]</mwsh:comments>
<mwsh:comments xml:space="preserve">% CALCULATIONS</mwsh:comments><mwsh:comments xml:space="preserve">% ------------</mwsh:comments><mwsh:comments xml:space="preserve">% Power (USE: p = i*v)</mwsh:comments><mwsh:comments xml:space="preserve">% NOTE: "Accessories" include H2O pump, air pump, H2 vent, &amp; controller</mwsh:comments>
p_load =  i_load  .* v_load;                                        <mwsh:comments xml:space="preserve">% [W] = [kg*m^2*s^-3], a.k.a. "load" (power delivered to resistor bank)</mwsh:comments>
p_stack = i_stack .* v_stack;
p_access = p_stack - p_load;                                        <mwsh:comments xml:space="preserve">% [W], Acessory Power, i.e. power used to run controls. Pstack-Pload</mwsh:comments><mwsh:keywords xml:space="preserve">if</mwsh:keywords>(~supressplots(1))
    hold <mwsh:strings xml:space="preserve">off</mwsh:strings>;
    f1 = figure(1);
    plot(p_load,i_load,p_load,i_stack);
    title(<mwsh:strings xml:space="preserve">'Current as a Function of Load'</mwsh:strings>);
    xlabel(<mwsh:strings xml:space="preserve">'Load [Watts]'</mwsh:strings>); ylabel(<mwsh:strings xml:space="preserve">'Current [Amps]'</mwsh:strings>);
    legend(<mwsh:strings xml:space="preserve">'I_{load}'</mwsh:strings>,<mwsh:strings xml:space="preserve">'I_{stack}'</mwsh:strings>,<mwsh:strings xml:space="preserve">'Location'</mwsh:strings>,<mwsh:strings xml:space="preserve">'best'</mwsh:strings>); grid <mwsh:strings xml:space="preserve">on</mwsh:strings>;

    f2 = figure(2);
    plot(p_load,v_load,p_load,v_stack);
    title(<mwsh:strings xml:space="preserve">'Potential as a Function of Load'</mwsh:strings>);
    xlabel(<mwsh:strings xml:space="preserve">'Load [Watts]'</mwsh:strings>); ylabel(<mwsh:strings xml:space="preserve">'Potential [Volts]'</mwsh:strings>);
    legend(<mwsh:strings xml:space="preserve">'V_{load}'</mwsh:strings>,<mwsh:strings xml:space="preserve">'V_{stack}'</mwsh:strings>,<mwsh:strings xml:space="preserve">'Location'</mwsh:strings>,<mwsh:strings xml:space="preserve">'best'</mwsh:strings>); grid <mwsh:strings xml:space="preserve">on</mwsh:strings>;

    f3 = figure(3);
    plot(p_load,p_stack,p_load,p_access);
    title(<mwsh:strings xml:space="preserve">'Stack and Accessory Power as a Function of Load'</mwsh:strings>);
    xlabel(<mwsh:strings xml:space="preserve">'Load [Watts]'</mwsh:strings>); ylabel(<mwsh:strings xml:space="preserve">'Power [Watts]'</mwsh:strings>);
    text(5,50,<mwsh:strings xml:space="preserve">'Net Power = 0 @ 0 Load'</mwsh:strings>);
    legend(<mwsh:strings xml:space="preserve">'P_{stack}'</mwsh:strings>,<mwsh:strings xml:space="preserve">'P_{accessory}'</mwsh:strings>,<mwsh:strings xml:space="preserve">'Location'</mwsh:strings>,<mwsh:strings xml:space="preserve">'best'</mwsh:strings>); grid <mwsh:strings xml:space="preserve">on</mwsh:strings>;

    f4 = figure(4);
    plot(p_load, mdot_fuel*100, p_load, mdot_total);
    title(<mwsh:strings xml:space="preserve">'Mass Flow Rate as a Function of Load'</mwsh:strings>);
    xlabel(<mwsh:strings xml:space="preserve">'Load [Watts]'</mwsh:strings>); ylabel(<mwsh:strings xml:space="preserve">'Mass Flow Rate [kg/s]'</mwsh:strings>);
    legend(<mwsh:strings xml:space="preserve">'mdot_{H}*100'</mwsh:strings>,<mwsh:strings xml:space="preserve">'mdot_{air}'</mwsh:strings>,<mwsh:strings xml:space="preserve">'Location'</mwsh:strings>,<mwsh:strings xml:space="preserve">'best'</mwsh:strings>); grid <mwsh:strings xml:space="preserve">on</mwsh:strings>;

<mwsh:keywords xml:space="preserve">end</mwsh:keywords></mwsh:code></mcode-xmlized>
      <mcode-count>2</mcode-count>
      <cellOutputTarget>2</cellOutputTarget>
   </cell>
   <cell>
      <count>3</count>
      <steptitle>Part A, Section 2</steptitle>
      <mcode>% SOURCE: LEC 8, SLIDES 21 &amp; 22

% 1st &amp; 2nd Law Efficiencies (eta_I &amp; eta_II) &amp; Inefficiencies (Idot)
% Stack
[etaI_stack ,etaII_stack, Idot_stack,lambda_stack,dGstack] = findEtas(mdot_total, mdot_fuel, Ptotal, Pfuel, T2, p_stack);

% Entire System (Load)
[etaI_load ,etaII_load, Idot_load,lambda_load,dGload] =    findEtas(mdot_total, mdot_fuel, Ptotal, Pfuel, T2, p_load);
if(~supressplots(2))
    f6 = figure(6);
    plot(p_load,lambda_load);
    title('Air Equivalent as a Function of Load');
    xlabel('Load [Watts]'); ylabel('Lambda');
    legend('\lambda','Location','best');  grid on;

    f5 = figure(5);
    plot(p_load,etaI_stack,'c',p_load,etaI_load,'bp--',...
        p_load,etaII_stack,'r',p_load,etaII_load,'gp--');
    title('Efficiency as a Function of Load');
    xlabel('Load [Watts]'); ylabel('Efficiency');
    legend('\eta_{I,stack}','\eta_{I,system}',...
        '\eta_{II,stack}','\eta_{II,system}', 'Location','Best');grid on;

    f7 = figure(7);
    plot(p_load,-dGstack-p_stack,'c',p_load,-dGload-p_load,'bp--');
    title('Power Loss/Inefficiences as a Function of Load');
    xlabel('Load [Watts]'); ylabel('Power Loss/Inefficiencies, Idot [Watts]');
    legend('Idot_{stack}','Idot_{system}','Location','best'); grid on;
end</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve"><mwsh:comments xml:space="preserve">% SOURCE: LEC 8, SLIDES 21 &amp; 22</mwsh:comments>
<mwsh:comments xml:space="preserve">% 1st &amp; 2nd Law Efficiencies (eta_I &amp; eta_II) &amp; Inefficiencies (Idot)</mwsh:comments><mwsh:comments xml:space="preserve">% Stack</mwsh:comments>
[etaI_stack ,etaII_stack, Idot_stack,lambda_stack,dGstack] = findEtas(mdot_total, mdot_fuel, Ptotal, Pfuel, T2, p_stack);

<mwsh:comments xml:space="preserve">% Entire System (Load)</mwsh:comments>
[etaI_load ,etaII_load, Idot_load,lambda_load,dGload] =    findEtas(mdot_total, mdot_fuel, Ptotal, Pfuel, T2, p_load);
<mwsh:keywords xml:space="preserve">if</mwsh:keywords>(~supressplots(2))
    f6 = figure(6);
    plot(p_load,lambda_load);
    title(<mwsh:strings xml:space="preserve">'Air Equivalent as a Function of Load'</mwsh:strings>);
    xlabel(<mwsh:strings xml:space="preserve">'Load [Watts]'</mwsh:strings>); ylabel(<mwsh:strings xml:space="preserve">'Lambda'</mwsh:strings>);
    legend(<mwsh:strings xml:space="preserve">'\lambda'</mwsh:strings>,<mwsh:strings xml:space="preserve">'Location'</mwsh:strings>,<mwsh:strings xml:space="preserve">'best'</mwsh:strings>);  grid <mwsh:strings xml:space="preserve">on</mwsh:strings>;

    f5 = figure(5);
    plot(p_load,etaI_stack,<mwsh:strings xml:space="preserve">'c'</mwsh:strings>,p_load,etaI_load,<mwsh:strings xml:space="preserve">'bp--'</mwsh:strings>,<mwsh:keywords xml:space="preserve">...</mwsh:keywords>
        p_load,etaII_stack,<mwsh:strings xml:space="preserve">'r'</mwsh:strings>,p_load,etaII_load,<mwsh:strings xml:space="preserve">'gp--'</mwsh:strings>);
    title(<mwsh:strings xml:space="preserve">'Efficiency as a Function of Load'</mwsh:strings>);
    xlabel(<mwsh:strings xml:space="preserve">'Load [Watts]'</mwsh:strings>); ylabel(<mwsh:strings xml:space="preserve">'Efficiency'</mwsh:strings>);
    legend(<mwsh:strings xml:space="preserve">'\eta_{I,stack}'</mwsh:strings>,<mwsh:strings xml:space="preserve">'\eta_{I,system}'</mwsh:strings>,<mwsh:keywords xml:space="preserve">...</mwsh:keywords>        <mwsh:strings xml:space="preserve">'\eta_{II,stack}'</mwsh:strings>,<mwsh:strings xml:space="preserve">'\eta_{II,system}'</mwsh:strings>, <mwsh:strings xml:space="preserve">'Location'</mwsh:strings>,<mwsh:strings xml:space="preserve">'Best'</mwsh:strings>);grid <mwsh:strings xml:space="preserve">on</mwsh:strings>;

    f7 = figure(7);
    plot(p_load,-dGstack-p_stack,<mwsh:strings xml:space="preserve">'c'</mwsh:strings>,p_load,-dGload-p_load,<mwsh:strings xml:space="preserve">'bp--'</mwsh:strings>);
    title(<mwsh:strings xml:space="preserve">'Power Loss/Inefficiences as a Function of Load'</mwsh:strings>);
    xlabel(<mwsh:strings xml:space="preserve">'Load [Watts]'</mwsh:strings>); ylabel(<mwsh:strings xml:space="preserve">'Power Loss/Inefficiencies, Idot [Watts]'</mwsh:strings>);
    legend(<mwsh:strings xml:space="preserve">'Idot_{stack}'</mwsh:strings>,<mwsh:strings xml:space="preserve">'Idot_{system}'</mwsh:strings>,<mwsh:strings xml:space="preserve">'Location'</mwsh:strings>,<mwsh:strings xml:space="preserve">'best'</mwsh:strings>); grid <mwsh:strings xml:space="preserve">on</mwsh:strings>;
<mwsh:keywords xml:space="preserve">end</mwsh:keywords></mwsh:code></mcode-xmlized>
      <mcode-count>3</mcode-count>
      <cellOutputTarget>3</cellOutputTarget>
   </cell>
   <cell>
      <count>4</count>
      <steptitle>Part A, Section 3</steptitle>
      <text>
         <p>Comparing First Law Efficiencies of PEM Fuel Cell with Diesel &amp; Hybrid Engines</p>
      </text>
      <mcode>% Typical modern Diesel engine (eta_disel = 42%) (chose diesel truck because it's better than a car and worse than a freight ship)
% Source Efficiency: Slide 3, http://www.sae.org/events/gim/presentations/2011/RolandGravel.pdf
% Source Horsepower: https://cumminsengines.com/isx15-heavy-duty-truck-2013#overview
eta_diesel = 0.42;
eta_diesel = linspace(eta_diesel, eta_diesel, length(p_load)); %Make it a line instead of points
Wdot_diesel = 400 * HORSEPOWER_TO_W;  % [W]

% Typical gasoline hybrid engine (eta_hybrid = max of 40%)
% Source Efficiency &amp; Horsepower: Toyota Hybrid Vehicles, http://www.toyota-global.com/innovation/environmental_technology/hybrid/
eta_hybrid = 0.40;
eta_hybrid = linspace(eta_hybrid, eta_hybrid, length(p_load)); % Make it a line
Wdot_hybrid = 121 * HORSEPOWER_TO_W;  % [W]

% Calcuate Heat Removal (Qdot) --&gt; 40 g/s necessary only for
% intensive/extensive conversion
Qdot_fuelCell = zeros(length(T4));
for i = 1:length(T4)
    Qdot_fuelCell(i) = hEng(T4(i),'h2o') - hEng(T5(i),'h2o');
end
Qdot_fuelCell_max = max(Qdot_fuelCell);

% Theoretical Number of Fuel Cells Needed
% Finding total power of cell out = load power plus Qdot
powerOut = p_load + Qdot_fuelCell_max;

num_fuelCells_diesel = Wdot_diesel ./ powerOut;
num_fuelCells_hybrid = Wdot_hybrid ./ powerOut;

if(~supressplots(3))
    % Overall First Law Efficiency of the PEM Fuel Cell = Stack Efficiency
    f8 = figure(8);
    plot(p_load, etaI_stack, 'c', p_load, eta_diesel, 'b:', p_load, eta_hybrid, 'g');
    title('Comparing 1st Law Efficiency: PEM Fuel Cell, Diesel, and Gasoline Hybrid');
    xlabel('Load [Watts]'); ylabel('Efficiency, eta_{I}');
    legend('eta_{I,stack}','eta_{I,Diesel}', 'eta_{I,Hybrid}','Location','northwest');  grid on;
end

% Comments: To scale this up, we would need somewhere between 280-540 fuel
% cells to equal the diesel output, and 85-165 fuel cells to equal the
% hybrid output.</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve"><mwsh:comments xml:space="preserve">% Typical modern Diesel engine (eta_disel = 42%) (chose diesel truck because it's better than a car and worse than a freight ship)</mwsh:comments><mwsh:comments xml:space="preserve">% Source Efficiency: Slide 3, http://www.sae.org/events/gim/presentations/2011/RolandGravel.pdf</mwsh:comments><mwsh:comments xml:space="preserve">% Source Horsepower: https://cumminsengines.com/isx15-heavy-duty-truck-2013#overview</mwsh:comments>
eta_diesel = 0.42;
eta_diesel = linspace(eta_diesel, eta_diesel, length(p_load)); <mwsh:comments xml:space="preserve">%Make it a line instead of points</mwsh:comments>
Wdot_diesel = 400 * HORSEPOWER_TO_W;  <mwsh:comments xml:space="preserve">% [W]</mwsh:comments>
<mwsh:comments xml:space="preserve">% Typical gasoline hybrid engine (eta_hybrid = max of 40%)</mwsh:comments><mwsh:comments xml:space="preserve">% Source Efficiency &amp; Horsepower: Toyota Hybrid Vehicles, http://www.toyota-global.com/innovation/environmental_technology/hybrid/</mwsh:comments>
eta_hybrid = 0.40;
eta_hybrid = linspace(eta_hybrid, eta_hybrid, length(p_load)); <mwsh:comments xml:space="preserve">% Make it a line</mwsh:comments>
Wdot_hybrid = 121 * HORSEPOWER_TO_W;  <mwsh:comments xml:space="preserve">% [W]</mwsh:comments>
<mwsh:comments xml:space="preserve">% Calcuate Heat Removal (Qdot) --&gt; 40 g/s necessary only for</mwsh:comments><mwsh:comments xml:space="preserve">% intensive/extensive conversion</mwsh:comments>
Qdot_fuelCell = zeros(length(T4));
<mwsh:keywords xml:space="preserve">for</mwsh:keywords> i = 1:length(T4)
    Qdot_fuelCell(i) = hEng(T4(i),<mwsh:strings xml:space="preserve">'h2o'</mwsh:strings>) - hEng(T5(i),<mwsh:strings xml:space="preserve">'h2o'</mwsh:strings>);
<mwsh:keywords xml:space="preserve">end</mwsh:keywords>
Qdot_fuelCell_max = max(Qdot_fuelCell);

<mwsh:comments xml:space="preserve">% Theoretical Number of Fuel Cells Needed</mwsh:comments><mwsh:comments xml:space="preserve">% Finding total power of cell out = load power plus Qdot</mwsh:comments>
powerOut = p_load + Qdot_fuelCell_max;

num_fuelCells_diesel = Wdot_diesel ./ powerOut;
num_fuelCells_hybrid = Wdot_hybrid ./ powerOut;

<mwsh:keywords xml:space="preserve">if</mwsh:keywords>(~supressplots(3))
    <mwsh:comments xml:space="preserve">% Overall First Law Efficiency of the PEM Fuel Cell = Stack Efficiency</mwsh:comments>
    f8 = figure(8);
    plot(p_load, etaI_stack, <mwsh:strings xml:space="preserve">'c'</mwsh:strings>, p_load, eta_diesel, <mwsh:strings xml:space="preserve">'b:'</mwsh:strings>, p_load, eta_hybrid, <mwsh:strings xml:space="preserve">'g'</mwsh:strings>);
    title(<mwsh:strings xml:space="preserve">'Comparing 1st Law Efficiency: PEM Fuel Cell, Diesel, and Gasoline Hybrid'</mwsh:strings>);
    xlabel(<mwsh:strings xml:space="preserve">'Load [Watts]'</mwsh:strings>); ylabel(<mwsh:strings xml:space="preserve">'Efficiency, eta_{I}'</mwsh:strings>);
    legend(<mwsh:strings xml:space="preserve">'eta_{I,stack}'</mwsh:strings>,<mwsh:strings xml:space="preserve">'eta_{I,Diesel}'</mwsh:strings>, <mwsh:strings xml:space="preserve">'eta_{I,Hybrid}'</mwsh:strings>,<mwsh:strings xml:space="preserve">'Location'</mwsh:strings>,<mwsh:strings xml:space="preserve">'northwest'</mwsh:strings>);  grid <mwsh:strings xml:space="preserve">on</mwsh:strings>;
<mwsh:keywords xml:space="preserve">end</mwsh:keywords>
<mwsh:comments xml:space="preserve">% Comments: To scale this up, we would need somewhere between 280-540 fuel</mwsh:comments><mwsh:comments xml:space="preserve">% cells to equal the diesel output, and 85-165 fuel cells to equal the</mwsh:comments><mwsh:comments xml:space="preserve">% hybrid output.</mwsh:comments></mwsh:code></mcode-xmlized>
      <mcode-count>4</mcode-count>
      <cellOutputTarget>4</cellOutputTarget>
   </cell>
   <cell>
      <count>5</count>
      <steptitle>Part B, Section 1</steptitle>
      <text>
         <p>Part B, Section 1 - Emily &amp; Kendall Calculating Kp Values SOURCE Kp Formula: LECTURE 14, SLIDE 4</p>
      </text>
      <mcode>% SMR: CH4 + H2O --&gt; CO + 3H2
% v values are stoichiometric coefficients
v_CO_SMR = 1;
v_H2_SMR = 3;
v_H2O_SMR = 1;
v_CH4_SMR = 1;

% Calculating Kp for SMR
% Nv_CO = mm
% SMRnumKp =

% WGS: H2O + CO --&gt; H2 + CO2
v_H2_WGS = 1;
v_CO2_WGS = 1;
v_H2O_WGS = 1;
v_CO_WGS = 1;

T_B1 = linspace(25, 1200, 100); %Temperature for part B1 = T_B1
T_B1 = T_B1 + C_TO_K;
%NOTE: Standard pressure, is usually defined as 100,000, however in energyF
%we have standard presssure as 101300. Because the pressure needs to
%cancel out, I have changed this pressure to 101300, however, we should
%perhaps consider changing the reference pressure in energyF to 100,000Pa.
P_ref = 101300; %This is the pressure defined for standard conditions.
% Standard conditions are what we need because that is what
% the little zero indicates in the equation for g.
R_u = 8.314; %Universal gas constant

%G_reaction = G_products - G_reactants
g_SMR = (gEng(T_B1, P_ref, 'co',v_CO_SMR) + gEng(T_B1, P_ref, 'h2',v_H2_SMR)) - ...
    (gEng(T_B1, P_ref, 'h2ovap',v_H2O_SMR) + gEng(T_B1, P_ref, 'ch4',v_CH4_SMR));

g_WGS = (gEng(T_B1, P_ref, 'h2',v_H2_WGS) + gEng(T_B1, P_ref, 'co2',v_CO2_WGS)) - ...
    (gEng(T_B1, P_ref, 'h2ovap',v_H2O_WGS) + gEng(T_B1, P_ref, 'co',v_CO_WGS));

%Lecture 13 - Slide 15
kp_SMR = exp(-g_SMR ./ (R_u .* T_B1)); %increases with temp
kp_WGS = exp(-g_WGS ./ (R_u .* T_B1)); %decrease with temp


%functions for convenience
f_kp_SMR = @(T_B1) exp(-((gEng(T_B1, P_ref, 'co',v_CO_SMR) ...
    + gEng(T_B1, P_ref, 'h2',v_H2_SMR))  ...
    - (gEng(T_B1, P_ref, 'h2ovap',v_H2O_SMR) ...
    + gEng(T_B1, P_ref, 'ch4',v_CH4_SMR)))...
    ./ (R_u.*T_B1));

f_kp_WGS = @(T_B1) exp(-((gEng(T_B1, P_ref, 'h2',v_H2_WGS) ...
    + gEng(T_B1, P_ref, 'co2',v_CO2_WGS)) ...
    -(gEng(T_B1, P_ref, 'h2ovap',v_H2O_WGS) ...
    + gEng(T_B1, P_ref, 'co',v_CO_WGS))) ...
    ./ (R_u.*T_B1));

%Prep for plot
%convert back to celcius
T_B1 = T_B1 - C_TO_K;
%find index of where kp=10^-3 and kp = 10^3, as the problem asks that we
%limit the graph to this range
[~,i_min_SMR] = min(abs(kp_SMR - 10^-3));
[~,i_max_SMR] = min(abs(kp_SMR - 10^3)); %yes, this is supposed to use min() to find the max ;P
[~,i_min_WGS] = min(abs(kp_WGS - 10^3));
[~,i_max_WGS] = min(abs(kp_WGS - 10^-3));

[zero_smr,izero_smr] = min(abs(log(kp_SMR)));
[zero_wgs,izero_wgs] = min(abs(log(kp_WGS)));

%Plot
if(~supressplots(3))
    f9 = figure(9);
    kpIsOne = ones(size(T_B1));
    semilogy(T_B1(i_min_SMR:i_max_SMR), kp_SMR(i_min_SMR:i_max_SMR), ...
        T_B1(i_min_WGS:i_max_WGS), kp_WGS(i_min_WGS:i_max_WGS),T_B1,kpIsOne,'k');
    xlabel('Temperature [C]')
    ylabel('Equilibrium Constant')
    text(T_B1(izero_smr) -300 , 1.5,...
        strcat('SMR equil @ ',num2str(round(T_B1(izero_smr))),'K'));
    text(T_B1(izero_wgs), 1.5,...
        strcat('WGS equil @ ',num2str(round(T_B1(izero_wgs))),'K'));
    legend('SMR', 'WGS')
    title('Part B.1: Equilibrium Constant vs. Temperature')
    ylim([0.001,1000]);
    text(50,5,{'H-Power','Operating Temp','25-100K'})
    grid on
    patch([25,100,100,25],[10^-3,10^-3,10^3,10^3],'g','FaceAlpha',.5,'EdgeAlpha',0);
    set(gca,'children',flipud(get(gca,'children'))) %puts shading beneath lines
end</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve"><mwsh:comments xml:space="preserve">% SMR: CH4 + H2O --&gt; CO + 3H2</mwsh:comments><mwsh:comments xml:space="preserve">% v values are stoichiometric coefficients</mwsh:comments>
v_CO_SMR = 1;
v_H2_SMR = 3;
v_H2O_SMR = 1;
v_CH4_SMR = 1;

<mwsh:comments xml:space="preserve">% Calculating Kp for SMR</mwsh:comments><mwsh:comments xml:space="preserve">% Nv_CO = mm</mwsh:comments><mwsh:comments xml:space="preserve">% SMRnumKp =</mwsh:comments>
<mwsh:comments xml:space="preserve">% WGS: H2O + CO --&gt; H2 + CO2</mwsh:comments>
v_H2_WGS = 1;
v_CO2_WGS = 1;
v_H2O_WGS = 1;
v_CO_WGS = 1;

T_B1 = linspace(25, 1200, 100); <mwsh:comments xml:space="preserve">%Temperature for part B1 = T_B1</mwsh:comments>
T_B1 = T_B1 + C_TO_K;
<mwsh:comments xml:space="preserve">%NOTE: Standard pressure, is usually defined as 100,000, however in energyF</mwsh:comments><mwsh:comments xml:space="preserve">%we have standard presssure as 101300. Because the pressure needs to</mwsh:comments><mwsh:comments xml:space="preserve">%cancel out, I have changed this pressure to 101300, however, we should</mwsh:comments><mwsh:comments xml:space="preserve">%perhaps consider changing the reference pressure in energyF to 100,000Pa.</mwsh:comments>
P_ref = 101300; <mwsh:comments xml:space="preserve">%This is the pressure defined for standard conditions.</mwsh:comments><mwsh:comments xml:space="preserve">% Standard conditions are what we need because that is what</mwsh:comments><mwsh:comments xml:space="preserve">% the little zero indicates in the equation for g.</mwsh:comments>
R_u = 8.314; <mwsh:comments xml:space="preserve">%Universal gas constant</mwsh:comments>
<mwsh:comments xml:space="preserve">%G_reaction = G_products - G_reactants</mwsh:comments>
g_SMR = (gEng(T_B1, P_ref, <mwsh:strings xml:space="preserve">'co'</mwsh:strings>,v_CO_SMR) + gEng(T_B1, P_ref, <mwsh:strings xml:space="preserve">'h2'</mwsh:strings>,v_H2_SMR)) - <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
    (gEng(T_B1, P_ref, <mwsh:strings xml:space="preserve">'h2ovap'</mwsh:strings>,v_H2O_SMR) + gEng(T_B1, P_ref, <mwsh:strings xml:space="preserve">'ch4'</mwsh:strings>,v_CH4_SMR));

g_WGS = (gEng(T_B1, P_ref, <mwsh:strings xml:space="preserve">'h2'</mwsh:strings>,v_H2_WGS) + gEng(T_B1, P_ref, <mwsh:strings xml:space="preserve">'co2'</mwsh:strings>,v_CO2_WGS)) - <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
    (gEng(T_B1, P_ref, <mwsh:strings xml:space="preserve">'h2ovap'</mwsh:strings>,v_H2O_WGS) + gEng(T_B1, P_ref, <mwsh:strings xml:space="preserve">'co'</mwsh:strings>,v_CO_WGS));

<mwsh:comments xml:space="preserve">%Lecture 13 - Slide 15</mwsh:comments>
kp_SMR = exp(-g_SMR ./ (R_u .* T_B1)); <mwsh:comments xml:space="preserve">%increases with temp</mwsh:comments>
kp_WGS = exp(-g_WGS ./ (R_u .* T_B1)); <mwsh:comments xml:space="preserve">%decrease with temp</mwsh:comments>

<mwsh:comments xml:space="preserve">%functions for convenience</mwsh:comments>
f_kp_SMR = @(T_B1) exp(-((gEng(T_B1, P_ref, <mwsh:strings xml:space="preserve">'co'</mwsh:strings>,v_CO_SMR) <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
    + gEng(T_B1, P_ref, <mwsh:strings xml:space="preserve">'h2'</mwsh:strings>,v_H2_SMR))  <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
    - (gEng(T_B1, P_ref, <mwsh:strings xml:space="preserve">'h2ovap'</mwsh:strings>,v_H2O_SMR) <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
    + gEng(T_B1, P_ref, <mwsh:strings xml:space="preserve">'ch4'</mwsh:strings>,v_CH4_SMR)))<mwsh:keywords xml:space="preserve">...</mwsh:keywords>
    ./ (R_u.*T_B1));

f_kp_WGS = @(T_B1) exp(-((gEng(T_B1, P_ref, <mwsh:strings xml:space="preserve">'h2'</mwsh:strings>,v_H2_WGS) <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
    + gEng(T_B1, P_ref, <mwsh:strings xml:space="preserve">'co2'</mwsh:strings>,v_CO2_WGS)) <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
    -(gEng(T_B1, P_ref, <mwsh:strings xml:space="preserve">'h2ovap'</mwsh:strings>,v_H2O_WGS) <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
    + gEng(T_B1, P_ref, <mwsh:strings xml:space="preserve">'co'</mwsh:strings>,v_CO_WGS))) <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
    ./ (R_u.*T_B1));

<mwsh:comments xml:space="preserve">%Prep for plot</mwsh:comments><mwsh:comments xml:space="preserve">%convert back to celcius</mwsh:comments>
T_B1 = T_B1 - C_TO_K;
<mwsh:comments xml:space="preserve">%find index of where kp=10^-3 and kp = 10^3, as the problem asks that we</mwsh:comments><mwsh:comments xml:space="preserve">%limit the graph to this range</mwsh:comments>
[~,i_min_SMR] = min(abs(kp_SMR - 10^-3));
[~,i_max_SMR] = min(abs(kp_SMR - 10^3)); <mwsh:comments xml:space="preserve">%yes, this is supposed to use min() to find the max ;P</mwsh:comments>
[~,i_min_WGS] = min(abs(kp_WGS - 10^3));
[~,i_max_WGS] = min(abs(kp_WGS - 10^-3));

[zero_smr,izero_smr] = min(abs(log(kp_SMR)));
[zero_wgs,izero_wgs] = min(abs(log(kp_WGS)));

<mwsh:comments xml:space="preserve">%Plot</mwsh:comments><mwsh:keywords xml:space="preserve">if</mwsh:keywords>(~supressplots(3))
    f9 = figure(9);
    kpIsOne = ones(size(T_B1));
    semilogy(T_B1(i_min_SMR:i_max_SMR), kp_SMR(i_min_SMR:i_max_SMR), <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
        T_B1(i_min_WGS:i_max_WGS), kp_WGS(i_min_WGS:i_max_WGS),T_B1,kpIsOne,<mwsh:strings xml:space="preserve">'k'</mwsh:strings>);
    xlabel(<mwsh:strings xml:space="preserve">'Temperature [C]'</mwsh:strings>)
    ylabel(<mwsh:strings xml:space="preserve">'Equilibrium Constant'</mwsh:strings>)
    text(T_B1(izero_smr) -300 , 1.5,<mwsh:keywords xml:space="preserve">...</mwsh:keywords>
        strcat(<mwsh:strings xml:space="preserve">'SMR equil @ '</mwsh:strings>,num2str(round(T_B1(izero_smr))),<mwsh:strings xml:space="preserve">'K'</mwsh:strings>));
    text(T_B1(izero_wgs), 1.5,<mwsh:keywords xml:space="preserve">...</mwsh:keywords>
        strcat(<mwsh:strings xml:space="preserve">'WGS equil @ '</mwsh:strings>,num2str(round(T_B1(izero_wgs))),<mwsh:strings xml:space="preserve">'K'</mwsh:strings>));
    legend(<mwsh:strings xml:space="preserve">'SMR'</mwsh:strings>, <mwsh:strings xml:space="preserve">'WGS'</mwsh:strings>)
    title(<mwsh:strings xml:space="preserve">'Part B.1: Equilibrium Constant vs. Temperature'</mwsh:strings>)
    ylim([0.001,1000]);
    text(50,5,{<mwsh:strings xml:space="preserve">'H-Power'</mwsh:strings>,<mwsh:strings xml:space="preserve">'Operating Temp'</mwsh:strings>,<mwsh:strings xml:space="preserve">'25-100K'</mwsh:strings>})
    grid <mwsh:strings xml:space="preserve">on</mwsh:strings>
    patch([25,100,100,25],[10^-3,10^-3,10^3,10^3],<mwsh:strings xml:space="preserve">'g'</mwsh:strings>,<mwsh:strings xml:space="preserve">'FaceAlpha'</mwsh:strings>,.5,<mwsh:strings xml:space="preserve">'EdgeAlpha'</mwsh:strings>,0);
    set(gca,<mwsh:strings xml:space="preserve">'children'</mwsh:strings>,flipud(get(gca,<mwsh:strings xml:space="preserve">'children'</mwsh:strings>))) <mwsh:comments xml:space="preserve">%puts shading beneath lines</mwsh:comments><mwsh:keywords xml:space="preserve">end</mwsh:keywords></mwsh:code></mcode-xmlized>
      <mcode-count>5</mcode-count>
      <cellOutputTarget>5</cellOutputTarget>
   </cell>
   <cell>
      <count>6</count>
      <steptitle>Part B No. 2</steptitle>
      <text>
         <p>Find the Equilibrium Composition (Mol Fractions) of the Steam Methane Reformation(SMR) Reaction SOURCE Nernst Atom Balance: LECTURE 14, SLIDE 4 (equation in lower right corner)</p>
      </text>
      <mcode>npts = 20;
syms nco nch4 nh2 nh2o;
warning('off','symbolic:numeric:NumericalInstability');

temps = linspace(25,1200,npts);
temps = temps + C_TO_K;
pres = [1,10,100];
soln = zeros(length(temps),4,length(pres));
tic
for i =  1:length(temps)
    t = temps(i);
    parfor j = 1:length(pres)
        p = pres(j);

        warning('off','symbolic:numeric:NumericalInstability');
        eqs = [1  == nco   + nch4;...             carbon atom balance
            10 == nh2*2 + nch4*4 + nh2o*2; ... hydrogen atom balance
            3  == nco   + nh2o;...             oxygen atom balance
            nco.*nh2.^3./(nch4.*nh2o).* ...    Nernst atom balance
            (p ./ (nco + nch4 + nh2 + nh2o).^2) ...
            == f_kp_SMR(t)];
        % 4 eq, 4 unknown
        assume([nco,nch4,nh2,nh2o],'real');
        assumeAlso([nco,nch4,nh2,nh2o] &gt; 0);
        assumeAlso([nco,nch4,nh2,nh2o] &lt; 20);
        [a,b,c,d] = vpasolve(eqs,[nco,nch4,nh2,nh2o],[1,1,1,1]);

        nco_sol(i,j) = double(a);
        nch4_sol(i,j) = double(b);
        nh2_sol(i,j) = double(c);
        nh2o_sol(i,j) = double(d);
        %          soln(i,:,j) = max(double(real([a,b,c,d]));

    end
end
% toc;
%calculate mole fractions from nmols in composition
ntot = nch4_sol + nh2_sol + nh2o_sol + nco_sol;
ych4 = nch4_sol./ntot;
yh2 = nh2_sol./ntot;
yh2o = nh2o_sol./ntot;
yco = nco_sol./ntot;

if(~supressplots(4))
    %unneeded but cool looking plot
    f10 = figure(10);
    plot(temps,nco_sol,'b',temps,nch4_sol,'m',temps,nh2_sol,'g',temps,nh2o_sol,'k');
    legend('CO','CH4','H2','H2O');

    %plot mole fractions
    f11 = figure(11);
    linestyle = {'-','--',':'};
    hold on
    plot(1,0,'-k',1,0,'--k',1,0,':k');
    hold on
    for i = 1:length(pres)
        plot(temps,yco(:,i),strcat(linestyle{i},'b'),...
            temps,ych4(:,i),strcat(linestyle{i},'m'),...
            temps,yh2(:,i),strcat(linestyle{i},'g'),...
            temps,yh2o(:,i),strcat(linestyle{i},'r'));
        hold on
    end
    hold off
    xlabel('Temperature [K]');
    ylabel('Mole Fraction');
    title('Steam Methane Reforming Composition');
    legend('1atm','10atm','100atm','CO','CH4','H2','H2O','location','West');
    %ylim([0.001,1]);
    grid on;
end</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">npts = 20;
syms <mwsh:strings xml:space="preserve">nco</mwsh:strings> <mwsh:strings xml:space="preserve">nch4</mwsh:strings> <mwsh:strings xml:space="preserve">nh2</mwsh:strings> <mwsh:strings xml:space="preserve">nh2o</mwsh:strings>;
warning(<mwsh:strings xml:space="preserve">'off'</mwsh:strings>,<mwsh:strings xml:space="preserve">'symbolic:numeric:NumericalInstability'</mwsh:strings>);

temps = linspace(25,1200,npts);
temps = temps + C_TO_K;
pres = [1,10,100];
soln = zeros(length(temps),4,length(pres));
tic
<mwsh:keywords xml:space="preserve">for</mwsh:keywords> i =  1:length(temps)
    t = temps(i);
    <mwsh:keywords xml:space="preserve">parfor</mwsh:keywords> j = 1:length(pres)
        p = pres(j);

        warning(<mwsh:strings xml:space="preserve">'off'</mwsh:strings>,<mwsh:strings xml:space="preserve">'symbolic:numeric:NumericalInstability'</mwsh:strings>);
        eqs = [1  == nco   + nch4;<mwsh:keywords xml:space="preserve">...</mwsh:keywords><mwsh:comments xml:space="preserve">             carbon atom balance</mwsh:comments>
            10 == nh2*2 + nch4*4 + nh2o*2; <mwsh:keywords xml:space="preserve">...</mwsh:keywords><mwsh:comments xml:space="preserve"> hydrogen atom balance</mwsh:comments>
            3  == nco   + nh2o;<mwsh:keywords xml:space="preserve">...</mwsh:keywords><mwsh:comments xml:space="preserve">             oxygen atom balance</mwsh:comments>
            nco.*nh2.^3./(nch4.*nh2o).* <mwsh:keywords xml:space="preserve">...</mwsh:keywords><mwsh:comments xml:space="preserve">    Nernst atom balance</mwsh:comments>
            (p ./ (nco + nch4 + nh2 + nh2o).^2) <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
            == f_kp_SMR(t)];
        <mwsh:comments xml:space="preserve">% 4 eq, 4 unknown</mwsh:comments>
        assume([nco,nch4,nh2,nh2o],<mwsh:strings xml:space="preserve">'real'</mwsh:strings>);
        assumeAlso([nco,nch4,nh2,nh2o] &gt; 0);
        assumeAlso([nco,nch4,nh2,nh2o] &lt; 20);
        [a,b,c,d] = vpasolve(eqs,[nco,nch4,nh2,nh2o],[1,1,1,1]);

        nco_sol(i,j) = double(a);
        nch4_sol(i,j) = double(b);
        nh2_sol(i,j) = double(c);
        nh2o_sol(i,j) = double(d);
        <mwsh:comments xml:space="preserve">%          soln(i,:,j) = max(double(real([a,b,c,d]));</mwsh:comments>
    <mwsh:keywords xml:space="preserve">end</mwsh:keywords><mwsh:keywords xml:space="preserve">end</mwsh:keywords><mwsh:comments xml:space="preserve">% toc;</mwsh:comments><mwsh:comments xml:space="preserve">%calculate mole fractions from nmols in composition</mwsh:comments>
ntot = nch4_sol + nh2_sol + nh2o_sol + nco_sol;
ych4 = nch4_sol./ntot;
yh2 = nh2_sol./ntot;
yh2o = nh2o_sol./ntot;
yco = nco_sol./ntot;

<mwsh:keywords xml:space="preserve">if</mwsh:keywords>(~supressplots(4))
    <mwsh:comments xml:space="preserve">%unneeded but cool looking plot</mwsh:comments>
    f10 = figure(10);
    plot(temps,nco_sol,<mwsh:strings xml:space="preserve">'b'</mwsh:strings>,temps,nch4_sol,<mwsh:strings xml:space="preserve">'m'</mwsh:strings>,temps,nh2_sol,<mwsh:strings xml:space="preserve">'g'</mwsh:strings>,temps,nh2o_sol,<mwsh:strings xml:space="preserve">'k'</mwsh:strings>);
    legend(<mwsh:strings xml:space="preserve">'CO'</mwsh:strings>,<mwsh:strings xml:space="preserve">'CH4'</mwsh:strings>,<mwsh:strings xml:space="preserve">'H2'</mwsh:strings>,<mwsh:strings xml:space="preserve">'H2O'</mwsh:strings>);

    <mwsh:comments xml:space="preserve">%plot mole fractions</mwsh:comments>
    f11 = figure(11);
    linestyle = {<mwsh:strings xml:space="preserve">'-'</mwsh:strings>,<mwsh:strings xml:space="preserve">'--'</mwsh:strings>,<mwsh:strings xml:space="preserve">':'</mwsh:strings>};
    hold <mwsh:strings xml:space="preserve">on</mwsh:strings>
    plot(1,0,<mwsh:strings xml:space="preserve">'-k'</mwsh:strings>,1,0,<mwsh:strings xml:space="preserve">'--k'</mwsh:strings>,1,0,<mwsh:strings xml:space="preserve">':k'</mwsh:strings>);
    hold <mwsh:strings xml:space="preserve">on</mwsh:strings>    <mwsh:keywords xml:space="preserve">for</mwsh:keywords> i = 1:length(pres)
        plot(temps,yco(:,i),strcat(linestyle{i},<mwsh:strings xml:space="preserve">'b'</mwsh:strings>),<mwsh:keywords xml:space="preserve">...</mwsh:keywords>
            temps,ych4(:,i),strcat(linestyle{i},<mwsh:strings xml:space="preserve">'m'</mwsh:strings>),<mwsh:keywords xml:space="preserve">...</mwsh:keywords>
            temps,yh2(:,i),strcat(linestyle{i},<mwsh:strings xml:space="preserve">'g'</mwsh:strings>),<mwsh:keywords xml:space="preserve">...</mwsh:keywords>
            temps,yh2o(:,i),strcat(linestyle{i},<mwsh:strings xml:space="preserve">'r'</mwsh:strings>));
        hold <mwsh:strings xml:space="preserve">on</mwsh:strings>    <mwsh:keywords xml:space="preserve">end</mwsh:keywords>
    hold <mwsh:strings xml:space="preserve">off</mwsh:strings>
    xlabel(<mwsh:strings xml:space="preserve">'Temperature [K]'</mwsh:strings>);
    ylabel(<mwsh:strings xml:space="preserve">'Mole Fraction'</mwsh:strings>);
    title(<mwsh:strings xml:space="preserve">'Steam Methane Reforming Composition'</mwsh:strings>);
    legend(<mwsh:strings xml:space="preserve">'1atm'</mwsh:strings>,<mwsh:strings xml:space="preserve">'10atm'</mwsh:strings>,<mwsh:strings xml:space="preserve">'100atm'</mwsh:strings>,<mwsh:strings xml:space="preserve">'CO'</mwsh:strings>,<mwsh:strings xml:space="preserve">'CH4'</mwsh:strings>,<mwsh:strings xml:space="preserve">'H2'</mwsh:strings>,<mwsh:strings xml:space="preserve">'H2O'</mwsh:strings>,<mwsh:strings xml:space="preserve">'location'</mwsh:strings>,<mwsh:strings xml:space="preserve">'West'</mwsh:strings>);
    <mwsh:comments xml:space="preserve">%ylim([0.001,1]);</mwsh:comments>
    grid <mwsh:strings xml:space="preserve">on</mwsh:strings>;
<mwsh:keywords xml:space="preserve">end</mwsh:keywords></mwsh:code></mcode-xmlized>
      <mcode-count>6</mcode-count>
      <cellOutputTarget>6</cellOutputTarget>
   </cell>
   <cell>
      <count>7</count>
      <steptitle>Part B No. 3</steptitle>
      <text>
         <p>% Equations we'll need:  eqs = [       1  == nco2   + nco;...          carbon atom balance                4  == nco2*2 + nco + nh2o; ...  hydrogen atom balance                6  == nh2*2   + nh2o*2;...      oxygen atom balance                nco.*nh2o.^3./(nco2.*nh2).* ... Nernst atom balance                   == f_kp_SMR(t)];         % 4 eq, 4 unknown         [a,b,c,d] = vpasolve(eqs,[nco,nh2o,nco2,nh2],[1,1,1,1]);</p>
      </text>
      <mcode>syms nco nco2 nh2 nh2o;
%soln_wgs = zeros(length(temps),4,length(pres));
tic
% ***BROKEN***
parfor i = 1:length(temps)
    warning('off','symbolic:numeric:NumericalInstability');
    t = temps(i);

    eqs = [       1  == nco2   + nco;...carbon atom balance
        3  == nco2*2 + nco + nh2o; ...  oxygen atom balance
        10  == nh2*2   + nh2o*2;...      hydrogen atom balance
        (nco2.*nh2)./(nco.*nh2o) ... Nernst atom balance
        == f_kp_WGS(t)];        %(note no pressure term, as nmols same on RHS and LHS)
    % 4 eq, 4 unknown
    assume([nco,nh2o,nco2,nh2],'real');
    assumeAlso([nco,nh2o,nco2,nh2] &gt; 0);
    assumeAlso([nco,nh2o,nco2,nh2] &lt; 20);
    [a,b,c,d] = vpasolve(eqs,[nco,nh2o,nco2,nh2],[1,1,1,1]);
    nco_wgs(i) = double(a);
    nh2o_wgs(i) = double(b);
    nco2_wgs(i) = double(c);
    nh2_wgs(i) = double(d);
    %          soln(i,:,j) = max(double(real([a,b,c,d]));

end
% toc;
ntot_wgs = nco_wgs + nh2_wgs + nh2o_wgs + nco2_wgs;
yco2_wgs = nco2_wgs./ntot_wgs;
yh2_wgs = nh2_wgs./ntot_wgs;
yh2o_wgs = nh2o_wgs./ntot_wgs;
yco_wgs = nco_wgs./ntot_wgs;

if(~supressplots(4))

    f12 = figure(12);
    plot(temps,yco_wgs,'b',...
        temps,yco2_wgs,'m',...
        temps,yh2_wgs,'--g',...
        temps,yh2o_wgs,'r');
    legend('CO','CO2','H2','H2O','location','southwest');
    xlabel('Temperature [K]');
    ylabel('Mole Fraction');
    title('Water Gas Shift Composition');
    %ylim([0.001,1]);
    grid on;
end</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">syms <mwsh:strings xml:space="preserve">nco</mwsh:strings> <mwsh:strings xml:space="preserve">nco2</mwsh:strings> <mwsh:strings xml:space="preserve">nh2</mwsh:strings> <mwsh:strings xml:space="preserve">nh2o</mwsh:strings>;
<mwsh:comments xml:space="preserve">%soln_wgs = zeros(length(temps),4,length(pres));</mwsh:comments>
tic
<mwsh:comments xml:space="preserve">% ***BROKEN***</mwsh:comments><mwsh:keywords xml:space="preserve">parfor</mwsh:keywords> i = 1:length(temps)
    warning(<mwsh:strings xml:space="preserve">'off'</mwsh:strings>,<mwsh:strings xml:space="preserve">'symbolic:numeric:NumericalInstability'</mwsh:strings>);
    t = temps(i);

    eqs = [       1  == nco2   + nco;<mwsh:keywords xml:space="preserve">...</mwsh:keywords><mwsh:comments xml:space="preserve">carbon atom balance</mwsh:comments>
        3  == nco2*2 + nco + nh2o; <mwsh:keywords xml:space="preserve">...</mwsh:keywords><mwsh:comments xml:space="preserve">  oxygen atom balance</mwsh:comments>
        10  == nh2*2   + nh2o*2;<mwsh:keywords xml:space="preserve">...</mwsh:keywords><mwsh:comments xml:space="preserve">      hydrogen atom balance</mwsh:comments>
        (nco2.*nh2)./(nco.*nh2o) <mwsh:keywords xml:space="preserve">...</mwsh:keywords><mwsh:comments xml:space="preserve"> Nernst atom balance</mwsh:comments>
        == f_kp_WGS(t)];        <mwsh:comments xml:space="preserve">%(note no pressure term, as nmols same on RHS and LHS)</mwsh:comments>    <mwsh:comments xml:space="preserve">% 4 eq, 4 unknown</mwsh:comments>
    assume([nco,nh2o,nco2,nh2],<mwsh:strings xml:space="preserve">'real'</mwsh:strings>);
    assumeAlso([nco,nh2o,nco2,nh2] &gt; 0);
    assumeAlso([nco,nh2o,nco2,nh2] &lt; 20);
    [a,b,c,d] = vpasolve(eqs,[nco,nh2o,nco2,nh2],[1,1,1,1]);
    nco_wgs(i) = double(a);
    nh2o_wgs(i) = double(b);
    nco2_wgs(i) = double(c);
    nh2_wgs(i) = double(d);
    <mwsh:comments xml:space="preserve">%          soln(i,:,j) = max(double(real([a,b,c,d]));</mwsh:comments>
<mwsh:keywords xml:space="preserve">end</mwsh:keywords><mwsh:comments xml:space="preserve">% toc;</mwsh:comments>
ntot_wgs = nco_wgs + nh2_wgs + nh2o_wgs + nco2_wgs;
yco2_wgs = nco2_wgs./ntot_wgs;
yh2_wgs = nh2_wgs./ntot_wgs;
yh2o_wgs = nh2o_wgs./ntot_wgs;
yco_wgs = nco_wgs./ntot_wgs;

<mwsh:keywords xml:space="preserve">if</mwsh:keywords>(~supressplots(4))

    f12 = figure(12);
    plot(temps,yco_wgs,<mwsh:strings xml:space="preserve">'b'</mwsh:strings>,<mwsh:keywords xml:space="preserve">...</mwsh:keywords>
        temps,yco2_wgs,<mwsh:strings xml:space="preserve">'m'</mwsh:strings>,<mwsh:keywords xml:space="preserve">...</mwsh:keywords>
        temps,yh2_wgs,<mwsh:strings xml:space="preserve">'--g'</mwsh:strings>,<mwsh:keywords xml:space="preserve">...</mwsh:keywords>
        temps,yh2o_wgs,<mwsh:strings xml:space="preserve">'r'</mwsh:strings>);
    legend(<mwsh:strings xml:space="preserve">'CO'</mwsh:strings>,<mwsh:strings xml:space="preserve">'CO2'</mwsh:strings>,<mwsh:strings xml:space="preserve">'H2'</mwsh:strings>,<mwsh:strings xml:space="preserve">'H2O'</mwsh:strings>,<mwsh:strings xml:space="preserve">'location'</mwsh:strings>,<mwsh:strings xml:space="preserve">'southwest'</mwsh:strings>);
    xlabel(<mwsh:strings xml:space="preserve">'Temperature [K]'</mwsh:strings>);
    ylabel(<mwsh:strings xml:space="preserve">'Mole Fraction'</mwsh:strings>);
    title(<mwsh:strings xml:space="preserve">'Water Gas Shift Composition'</mwsh:strings>);
    <mwsh:comments xml:space="preserve">%ylim([0.001,1]);</mwsh:comments>
    grid <mwsh:strings xml:space="preserve">on</mwsh:strings>;
<mwsh:keywords xml:space="preserve">end</mwsh:keywords></mwsh:code></mcode-xmlized>
      <mcode-count>7</mcode-count>
      <cellOutputTarget>7</cellOutputTarget>
   </cell>
   <cell>
      <count>8</count>
      <steptitle>Part B No. 4</steptitle>
      <text>
         <p>Plot exit composition (mol fractions) vs. 3 system stations (Reformer, Shift Reactor 1, Shift Reactor 2) Note: do this for 2 Different Assumptions: (1) isothermal, (2) adiabatic SMR: CH4 + 3*H2O --&gt; CO + 3*H2 + 2*H2O <a href="-known">because all assume all methane is used WGS: CO  + 2*H2O + 3*H2--</a> ?CO2 + (3+?)H2 + ?CO + ?H2O &lt;- unknown because WGS doens't go all the way to completition</p>
      </text>
      <mcode>% NAMING CONVENTIONS:
% Station Location: 1=Reformer, 2 = 1st Shift Reactor, 3 = 2nd Shift
% Assumption:       iso = isothermal, adi = adiabatic
% Inlet/Exit:       in = inlet, ex = exit

% PSEUDO CODE
% Start with Nernst atom balance for WGS reaction to get composition
% "Start with isothermal cases - adiabatic is a whole different beast"
% Assume first WGS uses up all CH4 and goes fully to completion
% Figure out the products from the WGS
% Use isothermal temperature values given to figure out Qdot
% Go step by step through and get products for each following reaction, ...
% Take those products and do isothermal calcs on them

% Inlet Temperatures
Tin_C = [800 400 250];    % [C]
Tin = Tin_C + C_TO_K; % [K]

% Exit Temperatures
Tex_iso_C = [800 400 250];
Tex_adi_C = [800 NaN NaN]; %TODO: solve for Tin_adi_C(2) &amp; (3)
Tex_iso = Tex_iso_C + C_TO_K;
Tex_adi = Tex_adi_C + C_TO_K;

% Heat Addition for Isothermal Reaction (Qin, ASSUME: isothermal)
Qin_iso = [NaN NaN NaN];             % [MJ/(kg of reactants)]

% Percent Methane Burned to Heat Reformer (pct_CH4, ASSUME: adiabatic)
pct_CH4 = [NaN]; % Note: only applies to Reformer! Not Shift Reactors!


% Part 1: Isothermal
% find exit compositions
compositions = zeros(4,3); %co;h2o;c02;h2
for i = 1:3
    compositions(:,i) = compositionsFun(f_kp_WGS(Tin(i)));
end

% find heat addition for each component
% WGS: CO  + 2*H2O + 3*H2--&gt; ?CO2 + (3+?)H2 + ?CO + ?H2O
% SMR: CH4 + 3*H2O --&gt; CO + 3*H2 + 2*H2O
% comps[species, stage]. Species order: CO, H20, CO2, H2
Qin = zeros(1,3);
N_H20_in = 3;
N_CH4_in = 1;
h_react =  hEng(Tin(1), 'h2ovap', N_H20_in) + hEng(Tin(1), 'ch4', N_CH4_in);
for s = 1:3 % three stages: reformer and two reactors
    h_prod = hEng(Tin(s), 'co', compositions(1,s)) + hEng(Tin(s), 'h2ovap', compositions(2,s)) + hEng(Tin(s), 'co2', compositions(3,s)) + hEng(Tin(s), 'h2', compositions(4,s));
    Qin(s) = h_prod - h_react;

    if (s == 3) break; end
    h_react = hEng(Tin(s+1), 'co', compositions(1,s)) + hEng(Tin(s+1), 'h2ovap', compositions(2,s)) + hEng(Tin(s+1), 'co2', compositions(3,s)) + hEng(Tin(s+1), 'h2', compositions(4,s));
end
% Qin_MJkg = ?
% TODO: GET Qin IN MJ/KG (CURRENTLY IN J. STORE IN NEW VARIABLE B/C Qin IS USED BELOW)

% PSEUDOCODE APPROACH
% Determine composition of each (CO H20vap CO2 H2) where we calculate Qin
% Use molar mass to get kg of each
% Divide Qin by kg total
% Convert J to MJ by dividing by a constant (10^6)

% currently in J/mol of methane reacted
%should be 3Mj/kg
Qin_perkg = Qin / (MM_ch4 / G_PER_KG) /1e6; % J/mol --&gt; MJ/kg


% Part 2: Adiabatic (only shift reactors)
error = 0.0001;
speedFactor = 1000;
T_guess = zeros(1,3);
comps_out_adi = zeros(4,3);
tic
% PROBLEM IS THAT TEMPS ARE JUST CONVERGING TO TEMP AT H_IN - MISSING
% SOMETHING CONCEPTUAL.
% temps = linspace(273,800,40);
% comps_out = zeros(length(temps),4);
% for i = 1:length(temps)
%    comps_out(i,:) = compositionsFun(f_kp_WGS(temps(i)))';
%    h_out(i) = hEng(temps(i),   'co',    comps_out(i,1)) ...
%             + hEng(temps(i), 'h2ovap',comps_out(i,2)) ...
%             + hEng(temps(i), 'co2',   comps_out(i,3)) ...
%             + hEng(temps(i), 'h2',    comps_out(i,4));
% end

% H_in occurs at stage 2
% comps[species, stage]. Species order: CO, H20, CO2, H2
comps_in(:) = compositions(:,1);
tol = 0.0001;
step = 1;
for s = 2:3 % two stages: hot shift reactor, cold shift reactor
    t = Tin(s);
    h_in = hEng(t, 'co', comps_in(1)) ...
        + hEng(t, 'h2ovap', comps_in(2)) ...
        + hEng(t, 'co2',comps_in(3)) ...
        + hEng(t, 'h2', comps_in(4));
    T_guess(s) = Tin(s) + 20;
    comps_out_adi(:,s) = compositionsFun(f_kp_WGS(T_guess(s)));
    h_out = hEng(T_guess(s),   'co',    comps_out_adi(1,s)) ...
            + hEng(T_guess(s), 'h2ovap',comps_out_adi(2,s)) ...
            + hEng(T_guess(s), 'co2',   comps_out_adi(3,s)) ...
            + hEng(T_guess(s), 'h2',    comps_out_adi(4,s));
    dh = h_out - h_in;
    % set up newton raphson variables
    % need to remember previous state for newton raphson
    tlast = Tin(s);
    dhlast = T_guess(s) - tlast;

    while abs(dh/h_in) &gt; tol %use percentage error for robustness
        dhprime = (dh - dhlast) ./(T_guess(s) - tlast);
        tlast = T_guess(s);
        T_guess(s) = T_guess(s) - dh ./ dhprime;
        comps_out_adi(:,s) = compositionsFun(f_kp_WGS(T_guess(s)));
        dhlast = dh;
        h_out = hEng(T_guess(s), 'co',comps_out_adi(1,s)) ...
            + hEng(T_guess(s), 'h2ovap',comps_out_adi(2,s)) ...
            + hEng(T_guess(s), 'co2',comps_out_adi(3,s)) ...
            + hEng(T_guess(s), 'h2',comps_out_adi(4,s));
        dh = h_out-h_in;
    end
    comps_in = comps_out_adi(:,s);
end
% toc
pctCO = comps_out_adi(1,:)./sum(comps_out_adi);
comps_out_adi(:,1) = compositions(:,1);
y_out_adi = comps_out_adi./repmat(sum(comps_out_adi),4,1);
y_iso = compositions./repmat(sum(compositions),4,1);
% ^SHOULD GET 740, 569 K FOR T_guess

% plot of exit composition vs system station (2x, isothermal and adiabatic)
if(~supressplots(4))
f13 = figure(13);
subplot(1,2,1);
bar(y_iso');
xlabel('State, Isothermal');
ylabel('Mole Fraction');
ylim([0,0.8]);
legend('CO', 'H20', 'CO2', 'H2','location','northwest');

subplot(1,2,2);
bar(y_out_adi');
xlabel('State, Adiabatic');
ylabel('Mole Fraction');
legend('CO', 'H20', 'CO2', 'H2','location','northwest');
ylim([0,0.8]);
set(f13, 'Position', [0 0 400 200])

annotation('textbox', [0 0.8 1 0.2], ...
    'String', 'H2 Reformer Outlet Molecular Composition', ...
    'EdgeColor', 'none', ...
    'HorizontalAlignment', 'center',...
    'FontSize',18); % add title to plot manually, subplots don't include an overall title
set(f13, 'Position', [300 800 800 400]) %resize plot
end


% Part 3: Heating reformer w/ methane
% find methane used by reformer - CHECK!
molar_mass_meth = 16.043/1000; % [kg/mol]
molar_mass_h2 = 2.016/1000; % [kg/mol]
LHV_meth = 50050e3*MM_ch4/G_PER_KG; % [J/mol]
LHV_h2 = 120000e3*molar_mass_h2; %[J/mol]
N_meth_burned = Qin(1)/LHV_meth; %moles of methane burned
perc_meth_burned = N_meth_burned./(N_meth_burned+1) * 100; %1 is the mole used for the actual reaction

% find LHV ratio - CHECK!
N_meth_rxn = 1;
LHV_ratio_isoth = LHV_h2*compositions(4,3)/(LHV_meth*(N_meth_burned + N_meth_rxn)) * 100;
LHV_ratio_adia = LHV_h2*comps_out_adi(4,3)/(LHV_meth*(N_meth_burned + N_meth_rxn)) * 100;


% NEED FOR TABLE:
% isothermal:
% -composition of gases exiting reformer and reactors
% -heat addition reqd for isothermal (do delta h energy balance on either
% side of each component)
% adiabatic:
% -adiabatic outlet temperatures of last two reactors
% -exit composition for shift reactors (and reformer, but same as above)
% heat part:
% -methane burned to heat reformer
% -LHV ratio (efficiency)
%
% PLOT: exit composition for isothermal and adiabatic at each station

if(sum(supressplots)~=4)
    plotfixer();
end
if(savePlots ==1)
     plotfixer();
    if(~supressplots(1))
        saveas(f1,'../plots5/1-CurrentbyLoad','png');
        saveas(f2,'../plots5/2-VbyLoad','png');
        saveas(f3,'../plots5/3-PowerbyLoad','png');
        saveas(f4,'../plots5/4-massbyload','png');
    end
    if(~supressplots(2))
        saveas(f5,'../plots5/5-Eff','png');
        saveas(f6,'../plots5/6-lambda','png');
        saveas(f7,'../plots5/7-PowerLoss','png');
    end
    if(~supressplots(3))
        saveas(f8,'../plots5/8-CompareToGasoline','png');
        saveas(f9,'../plots5/9-KeqbyT','png');
    end
    if(~supressplots(4))
        saveas(f10,'../plots5/10-SMRcompmol','png');
        saveas(f11,'../plots5/11-SMRcomp','png');
        saveas(f12,'../plots5/12-WGScomp','png');
        saveas(f13,'../plots5/13-ReformerComp','png');
    end
end
% toc(entireTime);</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve"><mwsh:comments xml:space="preserve">% NAMING CONVENTIONS:</mwsh:comments><mwsh:comments xml:space="preserve">% Station Location: 1=Reformer, 2 = 1st Shift Reactor, 3 = 2nd Shift</mwsh:comments><mwsh:comments xml:space="preserve">% Assumption:       iso = isothermal, adi = adiabatic</mwsh:comments><mwsh:comments xml:space="preserve">% Inlet/Exit:       in = inlet, ex = exit</mwsh:comments>
<mwsh:comments xml:space="preserve">% PSEUDO CODE</mwsh:comments><mwsh:comments xml:space="preserve">% Start with Nernst atom balance for WGS reaction to get composition</mwsh:comments><mwsh:comments xml:space="preserve">% "Start with isothermal cases - adiabatic is a whole different beast"</mwsh:comments><mwsh:comments xml:space="preserve">% Assume first WGS uses up all CH4 and goes fully to completion</mwsh:comments><mwsh:comments xml:space="preserve">% Figure out the products from the WGS</mwsh:comments><mwsh:comments xml:space="preserve">% Use isothermal temperature values given to figure out Qdot</mwsh:comments><mwsh:comments xml:space="preserve">% Go step by step through and get products for each following reaction, ...</mwsh:comments><mwsh:comments xml:space="preserve">% Take those products and do isothermal calcs on them</mwsh:comments>
<mwsh:comments xml:space="preserve">% Inlet Temperatures</mwsh:comments>
Tin_C = [800 400 250];    <mwsh:comments xml:space="preserve">% [C]</mwsh:comments>
Tin = Tin_C + C_TO_K; <mwsh:comments xml:space="preserve">% [K]</mwsh:comments>
<mwsh:comments xml:space="preserve">% Exit Temperatures</mwsh:comments>
Tex_iso_C = [800 400 250];
Tex_adi_C = [800 NaN NaN]; <mwsh:comments xml:space="preserve">%TODO: solve for Tin_adi_C(2) &amp; (3)</mwsh:comments>
Tex_iso = Tex_iso_C + C_TO_K;
Tex_adi = Tex_adi_C + C_TO_K;

<mwsh:comments xml:space="preserve">% Heat Addition for Isothermal Reaction (Qin, ASSUME: isothermal)</mwsh:comments>
Qin_iso = [NaN NaN NaN];             <mwsh:comments xml:space="preserve">% [MJ/(kg of reactants)]</mwsh:comments>
<mwsh:comments xml:space="preserve">% Percent Methane Burned to Heat Reformer (pct_CH4, ASSUME: adiabatic)</mwsh:comments>
pct_CH4 = [NaN]; <mwsh:comments xml:space="preserve">% Note: only applies to Reformer! Not Shift Reactors!</mwsh:comments>

<mwsh:comments xml:space="preserve">% Part 1: Isothermal</mwsh:comments><mwsh:comments xml:space="preserve">% find exit compositions</mwsh:comments>
compositions = zeros(4,3); <mwsh:comments xml:space="preserve">%co;h2o;c02;h2</mwsh:comments><mwsh:keywords xml:space="preserve">for</mwsh:keywords> i = 1:3
    compositions(:,i) = compositionsFun(f_kp_WGS(Tin(i)));
<mwsh:keywords xml:space="preserve">end</mwsh:keywords>
<mwsh:comments xml:space="preserve">% find heat addition for each component</mwsh:comments><mwsh:comments xml:space="preserve">% WGS: CO  + 2*H2O + 3*H2--&gt; ?CO2 + (3+?)H2 + ?CO + ?H2O</mwsh:comments><mwsh:comments xml:space="preserve">% SMR: CH4 + 3*H2O --&gt; CO + 3*H2 + 2*H2O</mwsh:comments><mwsh:comments xml:space="preserve">% comps[species, stage]. Species order: CO, H20, CO2, H2</mwsh:comments>
Qin = zeros(1,3);
N_H20_in = 3;
N_CH4_in = 1;
h_react =  hEng(Tin(1), <mwsh:strings xml:space="preserve">'h2ovap'</mwsh:strings>, N_H20_in) + hEng(Tin(1), <mwsh:strings xml:space="preserve">'ch4'</mwsh:strings>, N_CH4_in);
<mwsh:keywords xml:space="preserve">for</mwsh:keywords> s = 1:3 <mwsh:comments xml:space="preserve">% three stages: reformer and two reactors</mwsh:comments>
    h_prod = hEng(Tin(s), <mwsh:strings xml:space="preserve">'co'</mwsh:strings>, compositions(1,s)) + hEng(Tin(s), <mwsh:strings xml:space="preserve">'h2ovap'</mwsh:strings>, compositions(2,s)) + hEng(Tin(s), <mwsh:strings xml:space="preserve">'co2'</mwsh:strings>, compositions(3,s)) + hEng(Tin(s), <mwsh:strings xml:space="preserve">'h2'</mwsh:strings>, compositions(4,s));
    Qin(s) = h_prod - h_react;

    <mwsh:keywords xml:space="preserve">if</mwsh:keywords> (s == 3) <mwsh:keywords xml:space="preserve">break</mwsh:keywords>; <mwsh:keywords xml:space="preserve">end</mwsh:keywords>
    h_react = hEng(Tin(s+1), <mwsh:strings xml:space="preserve">'co'</mwsh:strings>, compositions(1,s)) + hEng(Tin(s+1), <mwsh:strings xml:space="preserve">'h2ovap'</mwsh:strings>, compositions(2,s)) + hEng(Tin(s+1), <mwsh:strings xml:space="preserve">'co2'</mwsh:strings>, compositions(3,s)) + hEng(Tin(s+1), <mwsh:strings xml:space="preserve">'h2'</mwsh:strings>, compositions(4,s));
<mwsh:keywords xml:space="preserve">end</mwsh:keywords><mwsh:comments xml:space="preserve">% Qin_MJkg = ?</mwsh:comments><mwsh:comments xml:space="preserve">% TODO: GET Qin IN MJ/KG (CURRENTLY IN J. STORE IN NEW VARIABLE B/C Qin IS USED BELOW)</mwsh:comments>
<mwsh:comments xml:space="preserve">% PSEUDOCODE APPROACH</mwsh:comments><mwsh:comments xml:space="preserve">% Determine composition of each (CO H20vap CO2 H2) where we calculate Qin</mwsh:comments><mwsh:comments xml:space="preserve">% Use molar mass to get kg of each</mwsh:comments><mwsh:comments xml:space="preserve">% Divide Qin by kg total</mwsh:comments><mwsh:comments xml:space="preserve">% Convert J to MJ by dividing by a constant (10^6)</mwsh:comments>
<mwsh:comments xml:space="preserve">% currently in J/mol of methane reacted</mwsh:comments><mwsh:comments xml:space="preserve">%should be 3Mj/kg</mwsh:comments>
Qin_perkg = Qin / (MM_ch4 / G_PER_KG) /1e6; <mwsh:comments xml:space="preserve">% J/mol --&gt; MJ/kg</mwsh:comments>

<mwsh:comments xml:space="preserve">% Part 2: Adiabatic (only shift reactors)</mwsh:comments>
error = 0.0001;
speedFactor = 1000;
T_guess = zeros(1,3);
comps_out_adi = zeros(4,3);
tic
<mwsh:comments xml:space="preserve">% PROBLEM IS THAT TEMPS ARE JUST CONVERGING TO TEMP AT H_IN - MISSING</mwsh:comments><mwsh:comments xml:space="preserve">% SOMETHING CONCEPTUAL.</mwsh:comments><mwsh:comments xml:space="preserve">% temps = linspace(273,800,40);</mwsh:comments><mwsh:comments xml:space="preserve">% comps_out = zeros(length(temps),4);</mwsh:comments><mwsh:comments xml:space="preserve">% for i = 1:length(temps)</mwsh:comments><mwsh:comments xml:space="preserve">%    comps_out(i,:) = compositionsFun(f_kp_WGS(temps(i)))';</mwsh:comments><mwsh:comments xml:space="preserve">%    h_out(i) = hEng(temps(i),   'co',    comps_out(i,1)) ...</mwsh:comments><mwsh:comments xml:space="preserve">%             + hEng(temps(i), 'h2ovap',comps_out(i,2)) ...</mwsh:comments><mwsh:comments xml:space="preserve">%             + hEng(temps(i), 'co2',   comps_out(i,3)) ...</mwsh:comments><mwsh:comments xml:space="preserve">%             + hEng(temps(i), 'h2',    comps_out(i,4));</mwsh:comments><mwsh:comments xml:space="preserve">% end</mwsh:comments>
<mwsh:comments xml:space="preserve">% H_in occurs at stage 2</mwsh:comments><mwsh:comments xml:space="preserve">% comps[species, stage]. Species order: CO, H20, CO2, H2</mwsh:comments>
comps_in(:) = compositions(:,1);
tol = 0.0001;
step = 1;
<mwsh:keywords xml:space="preserve">for</mwsh:keywords> s = 2:3 <mwsh:comments xml:space="preserve">% two stages: hot shift reactor, cold shift reactor</mwsh:comments>
    t = Tin(s);
    h_in = hEng(t, <mwsh:strings xml:space="preserve">'co'</mwsh:strings>, comps_in(1)) <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
        + hEng(t, <mwsh:strings xml:space="preserve">'h2ovap'</mwsh:strings>, comps_in(2)) <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
        + hEng(t, <mwsh:strings xml:space="preserve">'co2'</mwsh:strings>,comps_in(3)) <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
        + hEng(t, <mwsh:strings xml:space="preserve">'h2'</mwsh:strings>, comps_in(4));
    T_guess(s) = Tin(s) + 20;
    comps_out_adi(:,s) = compositionsFun(f_kp_WGS(T_guess(s)));
    h_out = hEng(T_guess(s),   <mwsh:strings xml:space="preserve">'co'</mwsh:strings>,    comps_out_adi(1,s)) <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
            + hEng(T_guess(s), <mwsh:strings xml:space="preserve">'h2ovap'</mwsh:strings>,comps_out_adi(2,s)) <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
            + hEng(T_guess(s), <mwsh:strings xml:space="preserve">'co2'</mwsh:strings>,   comps_out_adi(3,s)) <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
            + hEng(T_guess(s), <mwsh:strings xml:space="preserve">'h2'</mwsh:strings>,    comps_out_adi(4,s));
    dh = h_out - h_in;
    <mwsh:comments xml:space="preserve">% set up newton raphson variables</mwsh:comments>    <mwsh:comments xml:space="preserve">% need to remember previous state for newton raphson</mwsh:comments>
    tlast = Tin(s);
    dhlast = T_guess(s) - tlast;

    <mwsh:keywords xml:space="preserve">while</mwsh:keywords> abs(dh/h_in) &gt; tol <mwsh:comments xml:space="preserve">%use percentage error for robustness</mwsh:comments>
        dhprime = (dh - dhlast) ./(T_guess(s) - tlast);
        tlast = T_guess(s);
        T_guess(s) = T_guess(s) - dh ./ dhprime;
        comps_out_adi(:,s) = compositionsFun(f_kp_WGS(T_guess(s)));
        dhlast = dh;
        h_out = hEng(T_guess(s), <mwsh:strings xml:space="preserve">'co'</mwsh:strings>,comps_out_adi(1,s)) <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
            + hEng(T_guess(s), <mwsh:strings xml:space="preserve">'h2ovap'</mwsh:strings>,comps_out_adi(2,s)) <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
            + hEng(T_guess(s), <mwsh:strings xml:space="preserve">'co2'</mwsh:strings>,comps_out_adi(3,s)) <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
            + hEng(T_guess(s), <mwsh:strings xml:space="preserve">'h2'</mwsh:strings>,comps_out_adi(4,s));
        dh = h_out-h_in;
    <mwsh:keywords xml:space="preserve">end</mwsh:keywords>
    comps_in = comps_out_adi(:,s);
<mwsh:keywords xml:space="preserve">end</mwsh:keywords><mwsh:comments xml:space="preserve">% toc</mwsh:comments>
pctCO = comps_out_adi(1,:)./sum(comps_out_adi);
comps_out_adi(:,1) = compositions(:,1);
y_out_adi = comps_out_adi./repmat(sum(comps_out_adi),4,1);
y_iso = compositions./repmat(sum(compositions),4,1);
<mwsh:comments xml:space="preserve">% ^SHOULD GET 740, 569 K FOR T_guess</mwsh:comments>
<mwsh:comments xml:space="preserve">% plot of exit composition vs system station (2x, isothermal and adiabatic)</mwsh:comments><mwsh:keywords xml:space="preserve">if</mwsh:keywords>(~supressplots(4))
f13 = figure(13);
subplot(1,2,1);
bar(y_iso');
xlabel(<mwsh:strings xml:space="preserve">'State, Isothermal'</mwsh:strings>);
ylabel(<mwsh:strings xml:space="preserve">'Mole Fraction'</mwsh:strings>);
ylim([0,0.8]);
legend(<mwsh:strings xml:space="preserve">'CO'</mwsh:strings>, <mwsh:strings xml:space="preserve">'H20'</mwsh:strings>, <mwsh:strings xml:space="preserve">'CO2'</mwsh:strings>, <mwsh:strings xml:space="preserve">'H2'</mwsh:strings>,<mwsh:strings xml:space="preserve">'location'</mwsh:strings>,<mwsh:strings xml:space="preserve">'northwest'</mwsh:strings>);

subplot(1,2,2);
bar(y_out_adi');
xlabel(<mwsh:strings xml:space="preserve">'State, Adiabatic'</mwsh:strings>);
ylabel(<mwsh:strings xml:space="preserve">'Mole Fraction'</mwsh:strings>);
legend(<mwsh:strings xml:space="preserve">'CO'</mwsh:strings>, <mwsh:strings xml:space="preserve">'H20'</mwsh:strings>, <mwsh:strings xml:space="preserve">'CO2'</mwsh:strings>, <mwsh:strings xml:space="preserve">'H2'</mwsh:strings>,<mwsh:strings xml:space="preserve">'location'</mwsh:strings>,<mwsh:strings xml:space="preserve">'northwest'</mwsh:strings>);
ylim([0,0.8]);
set(f13, <mwsh:strings xml:space="preserve">'Position'</mwsh:strings>, [0 0 400 200])

annotation(<mwsh:strings xml:space="preserve">'textbox'</mwsh:strings>, [0 0.8 1 0.2], <mwsh:keywords xml:space="preserve">...</mwsh:keywords>    <mwsh:strings xml:space="preserve">'String'</mwsh:strings>, <mwsh:strings xml:space="preserve">'H2 Reformer Outlet Molecular Composition'</mwsh:strings>, <mwsh:keywords xml:space="preserve">...</mwsh:keywords>    <mwsh:strings xml:space="preserve">'EdgeColor'</mwsh:strings>, <mwsh:strings xml:space="preserve">'none'</mwsh:strings>, <mwsh:keywords xml:space="preserve">...</mwsh:keywords>    <mwsh:strings xml:space="preserve">'HorizontalAlignment'</mwsh:strings>, <mwsh:strings xml:space="preserve">'center'</mwsh:strings>,<mwsh:keywords xml:space="preserve">...</mwsh:keywords>    <mwsh:strings xml:space="preserve">'FontSize'</mwsh:strings>,18); <mwsh:comments xml:space="preserve">% add title to plot manually, subplots don't include an overall title</mwsh:comments>
set(f13, <mwsh:strings xml:space="preserve">'Position'</mwsh:strings>, [300 800 800 400]) <mwsh:comments xml:space="preserve">%resize plot</mwsh:comments><mwsh:keywords xml:space="preserve">end</mwsh:keywords>

<mwsh:comments xml:space="preserve">% Part 3: Heating reformer w/ methane</mwsh:comments><mwsh:comments xml:space="preserve">% find methane used by reformer - CHECK!</mwsh:comments>
molar_mass_meth = 16.043/1000; <mwsh:comments xml:space="preserve">% [kg/mol]</mwsh:comments>
molar_mass_h2 = 2.016/1000; <mwsh:comments xml:space="preserve">% [kg/mol]</mwsh:comments>
LHV_meth = 50050e3*MM_ch4/G_PER_KG; <mwsh:comments xml:space="preserve">% [J/mol]</mwsh:comments>
LHV_h2 = 120000e3*molar_mass_h2; <mwsh:comments xml:space="preserve">%[J/mol]</mwsh:comments>
N_meth_burned = Qin(1)/LHV_meth; <mwsh:comments xml:space="preserve">%moles of methane burned</mwsh:comments>
perc_meth_burned = N_meth_burned./(N_meth_burned+1) * 100; <mwsh:comments xml:space="preserve">%1 is the mole used for the actual reaction</mwsh:comments>
<mwsh:comments xml:space="preserve">% find LHV ratio - CHECK!</mwsh:comments>
N_meth_rxn = 1;
LHV_ratio_isoth = LHV_h2*compositions(4,3)/(LHV_meth*(N_meth_burned + N_meth_rxn)) * 100;
LHV_ratio_adia = LHV_h2*comps_out_adi(4,3)/(LHV_meth*(N_meth_burned + N_meth_rxn)) * 100;


<mwsh:comments xml:space="preserve">% NEED FOR TABLE:</mwsh:comments><mwsh:comments xml:space="preserve">% isothermal:</mwsh:comments><mwsh:comments xml:space="preserve">% -composition of gases exiting reformer and reactors</mwsh:comments><mwsh:comments xml:space="preserve">% -heat addition reqd for isothermal (do delta h energy balance on either</mwsh:comments><mwsh:comments xml:space="preserve">% side of each component)</mwsh:comments><mwsh:comments xml:space="preserve">% adiabatic:</mwsh:comments><mwsh:comments xml:space="preserve">% -adiabatic outlet temperatures of last two reactors</mwsh:comments><mwsh:comments xml:space="preserve">% -exit composition for shift reactors (and reformer, but same as above)</mwsh:comments><mwsh:comments xml:space="preserve">% heat part:</mwsh:comments><mwsh:comments xml:space="preserve">% -methane burned to heat reformer</mwsh:comments><mwsh:comments xml:space="preserve">% -LHV ratio (efficiency)</mwsh:comments><mwsh:comments xml:space="preserve">%</mwsh:comments><mwsh:comments xml:space="preserve">% PLOT: exit composition for isothermal and adiabatic at each station</mwsh:comments>
<mwsh:keywords xml:space="preserve">if</mwsh:keywords>(sum(supressplots)~=4)
    plotfixer();
<mwsh:keywords xml:space="preserve">end</mwsh:keywords><mwsh:keywords xml:space="preserve">if</mwsh:keywords>(savePlots ==1)
     plotfixer();
    <mwsh:keywords xml:space="preserve">if</mwsh:keywords>(~supressplots(1))
        saveas(f1,<mwsh:strings xml:space="preserve">'../plots5/1-CurrentbyLoad'</mwsh:strings>,<mwsh:strings xml:space="preserve">'png'</mwsh:strings>);
        saveas(f2,<mwsh:strings xml:space="preserve">'../plots5/2-VbyLoad'</mwsh:strings>,<mwsh:strings xml:space="preserve">'png'</mwsh:strings>);
        saveas(f3,<mwsh:strings xml:space="preserve">'../plots5/3-PowerbyLoad'</mwsh:strings>,<mwsh:strings xml:space="preserve">'png'</mwsh:strings>);
        saveas(f4,<mwsh:strings xml:space="preserve">'../plots5/4-massbyload'</mwsh:strings>,<mwsh:strings xml:space="preserve">'png'</mwsh:strings>);
    <mwsh:keywords xml:space="preserve">end</mwsh:keywords>    <mwsh:keywords xml:space="preserve">if</mwsh:keywords>(~supressplots(2))
        saveas(f5,<mwsh:strings xml:space="preserve">'../plots5/5-Eff'</mwsh:strings>,<mwsh:strings xml:space="preserve">'png'</mwsh:strings>);
        saveas(f6,<mwsh:strings xml:space="preserve">'../plots5/6-lambda'</mwsh:strings>,<mwsh:strings xml:space="preserve">'png'</mwsh:strings>);
        saveas(f7,<mwsh:strings xml:space="preserve">'../plots5/7-PowerLoss'</mwsh:strings>,<mwsh:strings xml:space="preserve">'png'</mwsh:strings>);
    <mwsh:keywords xml:space="preserve">end</mwsh:keywords>    <mwsh:keywords xml:space="preserve">if</mwsh:keywords>(~supressplots(3))
        saveas(f8,<mwsh:strings xml:space="preserve">'../plots5/8-CompareToGasoline'</mwsh:strings>,<mwsh:strings xml:space="preserve">'png'</mwsh:strings>);
        saveas(f9,<mwsh:strings xml:space="preserve">'../plots5/9-KeqbyT'</mwsh:strings>,<mwsh:strings xml:space="preserve">'png'</mwsh:strings>);
    <mwsh:keywords xml:space="preserve">end</mwsh:keywords>    <mwsh:keywords xml:space="preserve">if</mwsh:keywords>(~supressplots(4))
        saveas(f10,<mwsh:strings xml:space="preserve">'../plots5/10-SMRcompmol'</mwsh:strings>,<mwsh:strings xml:space="preserve">'png'</mwsh:strings>);
        saveas(f11,<mwsh:strings xml:space="preserve">'../plots5/11-SMRcomp'</mwsh:strings>,<mwsh:strings xml:space="preserve">'png'</mwsh:strings>);
        saveas(f12,<mwsh:strings xml:space="preserve">'../plots5/12-WGScomp'</mwsh:strings>,<mwsh:strings xml:space="preserve">'png'</mwsh:strings>);
        saveas(f13,<mwsh:strings xml:space="preserve">'../plots5/13-ReformerComp'</mwsh:strings>,<mwsh:strings xml:space="preserve">'png'</mwsh:strings>);
    <mwsh:keywords xml:space="preserve">end</mwsh:keywords><mwsh:keywords xml:space="preserve">end</mwsh:keywords><mwsh:comments xml:space="preserve">% toc(entireTime);</mwsh:comments></mwsh:code></mcode-xmlized>
      <mcode-count>8</mcode-count>
      <cellOutputTarget>8</cellOutputTarget>
   </cell>
   <originalCode>% ME 140 Project #5
% FUEL CELL EVALUATION &amp; HYRDOGEN PRODUCTION ANALYSIS
% Frankie Willcox, Jon Renslo, Kendall Fagan, Emily Bohl, Natasha Berk

%Jon's todo list
% double check power loss (inefficiencies)
% ask about starting from STP (extra methane used?)

% ASSUME:
% (i)  mol_H2 = 1
clear; close all; clc;
format compact;
entireTime = tic;

global PERMIN_TO_PERSEC PERHR_TO_PERSEC G_PER_KG LHV F N_TO_O SCF_TO_MOLS ...
    C_TO_K PSI_TO_PA MM_h MM_h2 MM_o MM_n MM_ch4 MM_h2o MM_air PATM HORSEPOWER_TO_W
defineGlobals();
mol_H2 = 1;
savePlots = 0;
                % 1,2,3,4,5,6,7,8,9,10,11

supressplots =   [1,      1,    1,  1];         % supresses plots by section

%% Part A, Section 1
% Currents (load &amp; stack)
i_load =  [0.00 15.06 27.25 36.48 45.1 52.1 56.3 57.6 56.4];       % [Amps]
i_stack = [4.82 21.40 35.65 47.20 59.8 69.7 77.0 79.0 80.0];


% Potentials (load &amp; stack)
v_load =  [17.07 15.05 14.08 13.10 12.07 11.27 10.31 9.87  9.05 ]; % [Volts]
v_stack = [17.09 15.22 14.26 12.98 12.42 11.60 10.73 10.21 9.48];


% Temperatures from Thermocouple Readings [C]
% KEY: (Kendall please fill in with photo you took)
T1_C = [42.8 42.9 46.1 48.5 50.5 52.8 54.8 55.8 56.5];
T2_C =     [42.5 45.8 45.8 48.4 50.3 51.9 53.3 53.9 54.3];
Tstack_C = [40.7 41.3 42.5 42.9 44.6 45.6 46.9 46.9 47.6];

T1 = T1_C + C_TO_K;                                                % [K],  T1, air into stack
T2 = T2_C + C_TO_K;                                                % [K],  T2, air out of stack
Tstack = Tstack_C + C_TO_K;                                        % [K],  metal plates on the stack

% NOTE: T3-T5 are not needed for now
% T3_C =     [48.0 47.1 48.6 48.9 50.4 51.1 51.2 51.1 51.1];       % T3, water reservoir DON'T USE!
% T3 = T3_C + C_TO_K;
T4_C =     [48.0 47.2 48.2 48.9 50.4 51.1 51.2 51.1 51.1];
T5_C =     [40.7 41.3 42.5 42.9 44.6 45.6 46.9 46.9 47.6];
T4 = T4_C + C_TO_K;                                                % T4, water into stack
T5 = T5_C + C_TO_K;                                                % T5, water into heat exchanger


% Mass Flow Rates (TODO: check what units the mdots should be in)
mdot_total_scf = [0.75 1.10 1.45 1.81 2.55 3.10 3.30 3.25 3.40];   % [scf/min]
mdot_fuel_scf =  [2.50 6.20 10.5 14.3 18.2 22.0 24.6 25.0 26.1];   % [scf/hr] (standard cubic feet/hour)

mdot_total = mdot_total_scf * SCF_TO_MOLS * PERMIN_TO_PERSEC * ( MM_air / G_PER_KG);  % [kg/s]
mdot_fuel = mdot_fuel_scf * SCF_TO_MOLS * PERHR_TO_PERSEC * (MM_h2  / G_PER_KG);      % [kg/s]
mdot_h2o = 40 /G_PER_KG;                                                              % [kg/s]

% Pressures
Pfuel_psi =  [2.9 2.9 3.1 3.3 3.30 3.20 3.00 3.0 3.1];              % [psi] (gauge)
Ptotal_psi = [0.2 0.3 0.6 0.7 1.15 1.25 1.35 1.3 1.5];              % [psi] (gauge), pressure of combined air and H2O after humidifier
Pfuel =  Pfuel_psi  .* PSI_TO_PA + PATM;                            % [Pa]
Ptotal = Ptotal_psi .* PSI_TO_PA + PATM;                            % [Pa]

% CALCULATIONS
% ------------
% Power (USE: p = i*v)
% NOTE: "Accessories" include H2O pump, air pump, H2 vent, &amp; controller
p_load =  i_load  .* v_load;                                        % [W] = [kg*m^2*s^-3], a.k.a. "load" (power delivered to resistor bank)
p_stack = i_stack .* v_stack;
p_access = p_stack - p_load;                                        % [W], Acessory Power, i.e. power used to run controls. Pstack-Pload
if(~supressplots(1))
    hold off;
    f1 = figure(1);
    plot(p_load,i_load,p_load,i_stack);
    title('Current as a Function of Load');
    xlabel('Load [Watts]'); ylabel('Current [Amps]');
    legend('I_{load}','I_{stack}','Location','best'); grid on;
    
    f2 = figure(2);
    plot(p_load,v_load,p_load,v_stack);
    title('Potential as a Function of Load');
    xlabel('Load [Watts]'); ylabel('Potential [Volts]');
    legend('V_{load}','V_{stack}','Location','best'); grid on;
    
    f3 = figure(3);
    plot(p_load,p_stack,p_load,p_access);
    title('Stack and Accessory Power as a Function of Load');
    xlabel('Load [Watts]'); ylabel('Power [Watts]');
    text(5,50,'Net Power = 0 @ 0 Load');
    legend('P_{stack}','P_{accessory}','Location','best'); grid on;
    
    f4 = figure(4);
    plot(p_load, mdot_fuel*100, p_load, mdot_total);
    title('Mass Flow Rate as a Function of Load');
    xlabel('Load [Watts]'); ylabel('Mass Flow Rate [kg/s]');
    legend('mdot_{H}*100','mdot_{air}','Location','best'); grid on;
    
end

%% Part A, Section 2

% SOURCE: LEC 8, SLIDES 21 &amp; 22

% 1st &amp; 2nd Law Efficiencies (eta_I &amp; eta_II) &amp; Inefficiencies (Idot)
% Stack
[etaI_stack ,etaII_stack, Idot_stack,lambda_stack,dGstack] = findEtas(mdot_total, mdot_fuel, Ptotal, Pfuel, T2, p_stack);

% Entire System (Load)
[etaI_load ,etaII_load, Idot_load,lambda_load,dGload] =    findEtas(mdot_total, mdot_fuel, Ptotal, Pfuel, T2, p_load);
if(~supressplots(2))
    f6 = figure(6);
    plot(p_load,lambda_load);
    title('Air Equivalent as a Function of Load');
    xlabel('Load [Watts]'); ylabel('Lambda');
    legend('\lambda','Location','best');  grid on;
    
    f5 = figure(5);
    plot(p_load,etaI_stack,'c',p_load,etaI_load,'bp--',...
        p_load,etaII_stack,'r',p_load,etaII_load,'gp--');
    title('Efficiency as a Function of Load');
    xlabel('Load [Watts]'); ylabel('Efficiency');
    legend('\eta_{I,stack}','\eta_{I,system}',...
        '\eta_{II,stack}','\eta_{II,system}', 'Location','Best');grid on;
    
    f7 = figure(7);
    plot(p_load,-dGstack-p_stack,'c',p_load,-dGload-p_load,'bp--');
    title('Power Loss/Inefficiences as a Function of Load');
    xlabel('Load [Watts]'); ylabel('Power Loss/Inefficiencies, Idot [Watts]');
    legend('Idot_{stack}','Idot_{system}','Location','best'); grid on;
end

%% Part A, Section 3
% Comparing First Law Efficiencies of PEM Fuel Cell with Diesel &amp; Hybrid Engines

% Typical modern Diesel engine (eta_disel = 42%) (chose diesel truck because it's better than a car and worse than a freight ship)
% Source Efficiency: Slide 3, http://www.sae.org/events/gim/presentations/2011/RolandGravel.pdf
% Source Horsepower: https://cumminsengines.com/isx15-heavy-duty-truck-2013#overview
eta_diesel = 0.42;
eta_diesel = linspace(eta_diesel, eta_diesel, length(p_load)); %Make it a line instead of points
Wdot_diesel = 400 * HORSEPOWER_TO_W;  % [W]

% Typical gasoline hybrid engine (eta_hybrid = max of 40%)
% Source Efficiency &amp; Horsepower: Toyota Hybrid Vehicles, http://www.toyota-global.com/innovation/environmental_technology/hybrid/
eta_hybrid = 0.40;
eta_hybrid = linspace(eta_hybrid, eta_hybrid, length(p_load)); % Make it a line
Wdot_hybrid = 121 * HORSEPOWER_TO_W;  % [W]

% Calcuate Heat Removal (Qdot) --&gt; 40 g/s necessary only for
% intensive/extensive conversion
Qdot_fuelCell = zeros(length(T4));
for i = 1:length(T4)
    Qdot_fuelCell(i) = hEng(T4(i),'h2o') - hEng(T5(i),'h2o');
end
Qdot_fuelCell_max = max(Qdot_fuelCell);

% Theoretical Number of Fuel Cells Needed
% Finding total power of cell out = load power plus Qdot
powerOut = p_load + Qdot_fuelCell_max;

num_fuelCells_diesel = Wdot_diesel ./ powerOut;
num_fuelCells_hybrid = Wdot_hybrid ./ powerOut;

if(~supressplots(3))
    % Overall First Law Efficiency of the PEM Fuel Cell = Stack Efficiency
    f8 = figure(8);
    plot(p_load, etaI_stack, 'c', p_load, eta_diesel, 'b:', p_load, eta_hybrid, 'g');
    title('Comparing 1st Law Efficiency: PEM Fuel Cell, Diesel, and Gasoline Hybrid');
    xlabel('Load [Watts]'); ylabel('Efficiency, eta_{I}');
    legend('eta_{I,stack}','eta_{I,Diesel}', 'eta_{I,Hybrid}','Location','northwest');  grid on;
end

% Comments: To scale this up, we would need somewhere between 280-540 fuel
% cells to equal the diesel output, and 85-165 fuel cells to equal the
% hybrid output.

%% Part B, Section 1
% Part B, Section 1 - Emily &amp; Kendall
% Calculating Kp Values
% SOURCE Kp Formula: LECTURE 14, SLIDE 4

% SMR: CH4 + H2O --&gt; CO + 3H2
% v values are stoichiometric coefficients
v_CO_SMR = 1;
v_H2_SMR = 3;
v_H2O_SMR = 1;
v_CH4_SMR = 1;

% Calculating Kp for SMR
% Nv_CO = mm
% SMRnumKp =

% WGS: H2O + CO --&gt; H2 + CO2
v_H2_WGS = 1;
v_CO2_WGS = 1;
v_H2O_WGS = 1;
v_CO_WGS = 1;

T_B1 = linspace(25, 1200, 100); %Temperature for part B1 = T_B1
T_B1 = T_B1 + C_TO_K;
%NOTE: Standard pressure, is usually defined as 100,000, however in energyF
%we have standard presssure as 101300. Because the pressure needs to
%cancel out, I have changed this pressure to 101300, however, we should
%perhaps consider changing the reference pressure in energyF to 100,000Pa.
P_ref = 101300; %This is the pressure defined for standard conditions.
% Standard conditions are what we need because that is what
% the little zero indicates in the equation for g.
R_u = 8.314; %Universal gas constant

%G_reaction = G_products - G_reactants
g_SMR = (gEng(T_B1, P_ref, 'co',v_CO_SMR) + gEng(T_B1, P_ref, 'h2',v_H2_SMR)) - ...
    (gEng(T_B1, P_ref, 'h2ovap',v_H2O_SMR) + gEng(T_B1, P_ref, 'ch4',v_CH4_SMR));

g_WGS = (gEng(T_B1, P_ref, 'h2',v_H2_WGS) + gEng(T_B1, P_ref, 'co2',v_CO2_WGS)) - ...
    (gEng(T_B1, P_ref, 'h2ovap',v_H2O_WGS) + gEng(T_B1, P_ref, 'co',v_CO_WGS));

%Lecture 13 - Slide 15
kp_SMR = exp(-g_SMR ./ (R_u .* T_B1)); %increases with temp
kp_WGS = exp(-g_WGS ./ (R_u .* T_B1)); %decrease with temp


%functions for convenience
f_kp_SMR = @(T_B1) exp(-((gEng(T_B1, P_ref, 'co',v_CO_SMR) ...
    + gEng(T_B1, P_ref, 'h2',v_H2_SMR))  ...
    - (gEng(T_B1, P_ref, 'h2ovap',v_H2O_SMR) ...
    + gEng(T_B1, P_ref, 'ch4',v_CH4_SMR)))...
    ./ (R_u.*T_B1));

f_kp_WGS = @(T_B1) exp(-((gEng(T_B1, P_ref, 'h2',v_H2_WGS) ...
    + gEng(T_B1, P_ref, 'co2',v_CO2_WGS)) ...
    -(gEng(T_B1, P_ref, 'h2ovap',v_H2O_WGS) ...
    + gEng(T_B1, P_ref, 'co',v_CO_WGS))) ...
    ./ (R_u.*T_B1));

%Prep for plot
%convert back to celcius
T_B1 = T_B1 - C_TO_K;
%find index of where kp=10^-3 and kp = 10^3, as the problem asks that we
%limit the graph to this range
[~,i_min_SMR] = min(abs(kp_SMR - 10^-3));
[~,i_max_SMR] = min(abs(kp_SMR - 10^3)); %yes, this is supposed to use min() to find the max ;P
[~,i_min_WGS] = min(abs(kp_WGS - 10^3));
[~,i_max_WGS] = min(abs(kp_WGS - 10^-3));

[zero_smr,izero_smr] = min(abs(log(kp_SMR)));
[zero_wgs,izero_wgs] = min(abs(log(kp_WGS)));

%Plot
if(~supressplots(3))
    f9 = figure(9);
    kpIsOne = ones(size(T_B1));
    semilogy(T_B1(i_min_SMR:i_max_SMR), kp_SMR(i_min_SMR:i_max_SMR), ...
        T_B1(i_min_WGS:i_max_WGS), kp_WGS(i_min_WGS:i_max_WGS),T_B1,kpIsOne,'k');
    xlabel('Temperature [C]')
    ylabel('Equilibrium Constant')
    text(T_B1(izero_smr) -300 , 1.5,...
        strcat('SMR equil @ ',num2str(round(T_B1(izero_smr))),'K'));
    text(T_B1(izero_wgs), 1.5,...
        strcat('WGS equil @ ',num2str(round(T_B1(izero_wgs))),'K'));
    legend('SMR', 'WGS')
    title('Part B.1: Equilibrium Constant vs. Temperature')
    ylim([0.001,1000]);
    text(50,5,{'H-Power','Operating Temp','25-100K'})
    grid on
    patch([25,100,100,25],[10^-3,10^-3,10^3,10^3],'g','FaceAlpha',.5,'EdgeAlpha',0);
    set(gca,'children',flipud(get(gca,'children'))) %puts shading beneath lines
end
%% Part B No. 2
% Find the Equilibrium Composition (Mol Fractions) of the Steam Methane 
% Reformation(SMR) Reaction 
% SOURCE Nernst Atom Balance: LECTURE 14, SLIDE 4 (equation in lower right corner)
npts = 20;
syms nco nch4 nh2 nh2o;
warning('off','symbolic:numeric:NumericalInstability');

temps = linspace(25,1200,npts);
temps = temps + C_TO_K;
pres = [1,10,100];
soln = zeros(length(temps),4,length(pres));
tic
for i =  1:length(temps)
    t = temps(i);
    parfor j = 1:length(pres)
        p = pres(j);
        
        warning('off','symbolic:numeric:NumericalInstability');
        eqs = [1  == nco   + nch4;...             carbon atom balance
            10 == nh2*2 + nch4*4 + nh2o*2; ... hydrogen atom balance
            3  == nco   + nh2o;...             oxygen atom balance
            nco.*nh2.^3./(nch4.*nh2o).* ...    Nernst atom balance
            (p ./ (nco + nch4 + nh2 + nh2o).^2) ...
            == f_kp_SMR(t)];
        % 4 eq, 4 unknown
        assume([nco,nch4,nh2,nh2o],'real'); 
        assumeAlso([nco,nch4,nh2,nh2o] &gt; 0);
        assumeAlso([nco,nch4,nh2,nh2o] &lt; 20);
        [a,b,c,d] = vpasolve(eqs,[nco,nch4,nh2,nh2o],[1,1,1,1]);
        
        nco_sol(i,j) = double(a);
        nch4_sol(i,j) = double(b);
        nh2_sol(i,j) = double(c);
        nh2o_sol(i,j) = double(d);
        %          soln(i,:,j) = max(double(real([a,b,c,d]));
        
    end
end
% toc;
%calculate mole fractions from nmols in composition
ntot = nch4_sol + nh2_sol + nh2o_sol + nco_sol;
ych4 = nch4_sol./ntot;
yh2 = nh2_sol./ntot;
yh2o = nh2o_sol./ntot;
yco = nco_sol./ntot;

if(~supressplots(4))
    %unneeded but cool looking plot
    f10 = figure(10);
    plot(temps,nco_sol,'b',temps,nch4_sol,'m',temps,nh2_sol,'g',temps,nh2o_sol,'k');
    legend('CO','CH4','H2','H2O');
    
    %plot mole fractions
    f11 = figure(11);
    linestyle = {'-','--',':'};
    hold on
    plot(1,0,'-k',1,0,'--k',1,0,':k');
    hold on
    for i = 1:length(pres)
        plot(temps,yco(:,i),strcat(linestyle{i},'b'),...
            temps,ych4(:,i),strcat(linestyle{i},'m'),...
            temps,yh2(:,i),strcat(linestyle{i},'g'),...
            temps,yh2o(:,i),strcat(linestyle{i},'r'));
        hold on
    end
    hold off
    xlabel('Temperature [K]');
    ylabel('Mole Fraction');
    title('Steam Methane Reforming Composition');
    legend('1atm','10atm','100atm','CO','CH4','H2','H2O','location','West');
    %ylim([0.001,1]);
    grid on;
end

%% Part B No. 3
% % Equations we'll need:
%  eqs = [       1  == nco2   + nco;...          carbon atom balance
%                4  == nco2*2 + nco + nh2o; ...  hydrogen atom balance
%                6  == nh2*2   + nh2o*2;...      oxygen atom balance
%                nco.*nh2o.^3./(nco2.*nh2).* ... Nernst atom balance
%                   == f_kp_SMR(t)];
%         % 4 eq, 4 unknown
%         [a,b,c,d] = vpasolve(eqs,[nco,nh2o,nco2,nh2],[1,1,1,1]);
syms nco nco2 nh2 nh2o;
%soln_wgs = zeros(length(temps),4,length(pres));
tic
% ***BROKEN***
parfor i = 1:length(temps)
    warning('off','symbolic:numeric:NumericalInstability');
    t = temps(i);
    
    eqs = [       1  == nco2   + nco;...carbon atom balance  
        3  == nco2*2 + nco + nh2o; ...  oxygen atom balance
        10  == nh2*2   + nh2o*2;...      hydrogen atom balance 
        (nco2.*nh2)./(nco.*nh2o) ... Nernst atom balance
        == f_kp_WGS(t)];        %(note no pressure term, as nmols same on RHS and LHS)
    % 4 eq, 4 unknown   
    assume([nco,nh2o,nco2,nh2],'real'); 
    assumeAlso([nco,nh2o,nco2,nh2] &gt; 0);
    assumeAlso([nco,nh2o,nco2,nh2] &lt; 20);
    [a,b,c,d] = vpasolve(eqs,[nco,nh2o,nco2,nh2],[1,1,1,1]);
    nco_wgs(i) = double(a);
    nh2o_wgs(i) = double(b);
    nco2_wgs(i) = double(c);
    nh2_wgs(i) = double(d);
    %          soln(i,:,j) = max(double(real([a,b,c,d]));
    
end
% toc;
ntot_wgs = nco_wgs + nh2_wgs + nh2o_wgs + nco2_wgs;
yco2_wgs = nco2_wgs./ntot_wgs;
yh2_wgs = nh2_wgs./ntot_wgs;
yh2o_wgs = nh2o_wgs./ntot_wgs;
yco_wgs = nco_wgs./ntot_wgs;

if(~supressplots(4))
    
    f12 = figure(12);
    plot(temps,yco_wgs,'b',...
        temps,yco2_wgs,'m',...
        temps,yh2_wgs,'--g',...
        temps,yh2o_wgs,'r');
    legend('CO','CO2','H2','H2O','location','southwest');
    xlabel('Temperature [K]');
    ylabel('Mole Fraction');
    title('Water Gas Shift Composition');
    %ylim([0.001,1]);
    grid on;
end


%% Part B No. 4
% Plot exit composition (mol fractions) vs. 3 system stations (Reformer,
% Shift Reactor 1, Shift Reactor 2) 
% Note: do this for 2 Different Assumptions: (1) isothermal, (2) adiabatic
% SMR: CH4 + 3*H2O --&gt; CO + 3*H2 + 2*H2O &lt;-known because all assume all
% methane is used
% WGS: CO  + 2*H2O + 3*H2--&gt; ?CO2 + (3+?)H2 + ?CO + ?H2O &lt;- unknown because WGS
% doens't go all the way to completition


% NAMING CONVENTIONS: 
% Station Location: 1=Reformer, 2 = 1st Shift Reactor, 3 = 2nd Shift
% Assumption:       iso = isothermal, adi = adiabatic 
% Inlet/Exit:       in = inlet, ex = exit

% PSEUDO CODE
% Start with Nernst atom balance for WGS reaction to get composition
% "Start with isothermal cases - adiabatic is a whole different beast"
% Assume first WGS uses up all CH4 and goes fully to completion
% Figure out the products from the WGS
% Use isothermal temperature values given to figure out Qdot
% Go step by step through and get products for each following reaction, ...
% Take those products and do isothermal calcs on them

% Inlet Temperatures 
Tin_C = [800 400 250];    % [C]
Tin = Tin_C + C_TO_K; % [K]

% Exit Temperatures
Tex_iso_C = [800 400 250]; 
Tex_adi_C = [800 NaN NaN]; %TODO: solve for Tin_adi_C(2) &amp; (3)
Tex_iso = Tex_iso_C + C_TO_K;
Tex_adi = Tex_adi_C + C_TO_K;

% Heat Addition for Isothermal Reaction (Qin, ASSUME: isothermal)
Qin_iso = [NaN NaN NaN];             % [MJ/(kg of reactants)]

% Percent Methane Burned to Heat Reformer (pct_CH4, ASSUME: adiabatic)
pct_CH4 = [NaN]; % Note: only applies to Reformer! Not Shift Reactors!


% Part 1: Isothermal
% find exit compositions
compositions = zeros(4,3); %co;h2o;c02;h2
for i = 1:3
    compositions(:,i) = compositionsFun(f_kp_WGS(Tin(i)));
end

% find heat addition for each component
% WGS: CO  + 2*H2O + 3*H2--&gt; ?CO2 + (3+?)H2 + ?CO + ?H2O
% SMR: CH4 + 3*H2O --&gt; CO + 3*H2 + 2*H2O
% comps[species, stage]. Species order: CO, H20, CO2, H2
Qin = zeros(1,3);
N_H20_in = 3; 
N_CH4_in = 1;
h_react =  hEng(Tin(1), 'h2ovap', N_H20_in) + hEng(Tin(1), 'ch4', N_CH4_in); 
for s = 1:3 % three stages: reformer and two reactors 
    h_prod = hEng(Tin(s), 'co', compositions(1,s)) + hEng(Tin(s), 'h2ovap', compositions(2,s)) + hEng(Tin(s), 'co2', compositions(3,s)) + hEng(Tin(s), 'h2', compositions(4,s));
    Qin(s) = h_prod - h_react;
    
    if (s == 3) break; end
    h_react = hEng(Tin(s+1), 'co', compositions(1,s)) + hEng(Tin(s+1), 'h2ovap', compositions(2,s)) + hEng(Tin(s+1), 'co2', compositions(3,s)) + hEng(Tin(s+1), 'h2', compositions(4,s));
end
% Qin_MJkg = ?
% TODO: GET Qin IN MJ/KG (CURRENTLY IN J. STORE IN NEW VARIABLE B/C Qin IS USED BELOW)

% PSEUDOCODE APPROACH
% Determine composition of each (CO H20vap CO2 H2) where we calculate Qin
% Use molar mass to get kg of each
% Divide Qin by kg total
% Convert J to MJ by dividing by a constant (10^6)

% currently in J/mol of methane reacted
%should be 3Mj/kg
Qin_perkg = Qin / (MM_ch4 / G_PER_KG) /1e6; % J/mol --&gt; MJ/kg


% Part 2: Adiabatic (only shift reactors)
error = 0.0001;
speedFactor = 1000;
T_guess = zeros(1,3);
comps_out_adi = zeros(4,3);
tic
% PROBLEM IS THAT TEMPS ARE JUST CONVERGING TO TEMP AT H_IN - MISSING 
% SOMETHING CONCEPTUAL. 
% temps = linspace(273,800,40);
% comps_out = zeros(length(temps),4);
% for i = 1:length(temps)
%    comps_out(i,:) = compositionsFun(f_kp_WGS(temps(i)))';
%    h_out(i) = hEng(temps(i),   'co',    comps_out(i,1)) ...
%             + hEng(temps(i), 'h2ovap',comps_out(i,2)) ...
%             + hEng(temps(i), 'co2',   comps_out(i,3)) ...
%             + hEng(temps(i), 'h2',    comps_out(i,4));
% end

% H_in occurs at stage 2
% comps[species, stage]. Species order: CO, H20, CO2, H2
comps_in(:) = compositions(:,1);
tol = 0.0001;
step = 1;
for s = 2:3 % two stages: hot shift reactor, cold shift reactor
    t = Tin(s);
    h_in = hEng(t, 'co', comps_in(1)) ...
        + hEng(t, 'h2ovap', comps_in(2)) ...
        + hEng(t, 'co2',comps_in(3)) ...
        + hEng(t, 'h2', comps_in(4));
    T_guess(s) = Tin(s) + 20;
    comps_out_adi(:,s) = compositionsFun(f_kp_WGS(T_guess(s)));
    h_out = hEng(T_guess(s),   'co',    comps_out_adi(1,s)) ...
            + hEng(T_guess(s), 'h2ovap',comps_out_adi(2,s)) ...
            + hEng(T_guess(s), 'co2',   comps_out_adi(3,s)) ...
            + hEng(T_guess(s), 'h2',    comps_out_adi(4,s));
    dh = h_out - h_in;   
    % set up newton raphson variables
    % need to remember previous state for newton raphson
    tlast = Tin(s);
    dhlast = T_guess(s) - tlast; 
    
    while abs(dh/h_in) &gt; tol %use percentage error for robustness
        dhprime = (dh - dhlast) ./(T_guess(s) - tlast);
        tlast = T_guess(s);
        T_guess(s) = T_guess(s) - dh ./ dhprime; 
        comps_out_adi(:,s) = compositionsFun(f_kp_WGS(T_guess(s)));
        dhlast = dh;
        h_out = hEng(T_guess(s), 'co',comps_out_adi(1,s)) ...
            + hEng(T_guess(s), 'h2ovap',comps_out_adi(2,s)) ...
            + hEng(T_guess(s), 'co2',comps_out_adi(3,s)) ...
            + hEng(T_guess(s), 'h2',comps_out_adi(4,s));
        dh = h_out-h_in;
    end
    comps_in = comps_out_adi(:,s);
end
% toc
pctCO = comps_out_adi(1,:)./sum(comps_out_adi);
comps_out_adi(:,1) = compositions(:,1);
y_out_adi = comps_out_adi./repmat(sum(comps_out_adi),4,1);
y_iso = compositions./repmat(sum(compositions),4,1);
% ^SHOULD GET 740, 569 K FOR T_guess

% plot of exit composition vs system station (2x, isothermal and adiabatic)
if(~supressplots(4))
f13 = figure(13);
subplot(1,2,1);
bar(y_iso');
xlabel('State, Isothermal');
ylabel('Mole Fraction');
ylim([0,0.8]);
legend('CO', 'H20', 'CO2', 'H2','location','northwest');

subplot(1,2,2);
bar(y_out_adi');
xlabel('State, Adiabatic');
ylabel('Mole Fraction');
legend('CO', 'H20', 'CO2', 'H2','location','northwest');
ylim([0,0.8]);
set(f13, 'Position', [0 0 400 200])

annotation('textbox', [0 0.8 1 0.2], ...
    'String', 'H2 Reformer Outlet Molecular Composition', ...
    'EdgeColor', 'none', ...
    'HorizontalAlignment', 'center',...
    'FontSize',18); % add title to plot manually, subplots don't include an overall title
set(f13, 'Position', [300 800 800 400]) %resize plot
end


% Part 3: Heating reformer w/ methane
% find methane used by reformer - CHECK!
molar_mass_meth = 16.043/1000; % [kg/mol]
molar_mass_h2 = 2.016/1000; % [kg/mol]
LHV_meth = 50050e3*MM_ch4/G_PER_KG; % [J/mol]
LHV_h2 = 120000e3*molar_mass_h2; %[J/mol]
N_meth_burned = Qin(1)/LHV_meth; %moles of methane burned
perc_meth_burned = N_meth_burned./(N_meth_burned+1) * 100; %1 is the mole used for the actual reaction

% find LHV ratio - CHECK!
N_meth_rxn = 1;
LHV_ratio_isoth = LHV_h2*compositions(4,3)/(LHV_meth*(N_meth_burned + N_meth_rxn)) * 100;
LHV_ratio_adia = LHV_h2*comps_out_adi(4,3)/(LHV_meth*(N_meth_burned + N_meth_rxn)) * 100;


% NEED FOR TABLE:
% isothermal:
% -composition of gases exiting reformer and reactors
% -heat addition reqd for isothermal (do delta h energy balance on either
% side of each component)
% adiabatic:
% -adiabatic outlet temperatures of last two reactors
% -exit composition for shift reactors (and reformer, but same as above)
% heat part:
% -methane burned to heat reformer
% -LHV ratio (efficiency)
% 
% PLOT: exit composition for isothermal and adiabatic at each station

if(sum(supressplots)~=4)
    plotfixer();
end
if(savePlots ==1)
     plotfixer(); 
    if(~supressplots(1))
        saveas(f1,'../plots5/1-CurrentbyLoad','png');
        saveas(f2,'../plots5/2-VbyLoad','png');
        saveas(f3,'../plots5/3-PowerbyLoad','png');
        saveas(f4,'../plots5/4-massbyload','png');
    end
    if(~supressplots(2))
        saveas(f5,'../plots5/5-Eff','png');
        saveas(f6,'../plots5/6-lambda','png');
        saveas(f7,'../plots5/7-PowerLoss','png');
    end
    if(~supressplots(3))
        saveas(f8,'../plots5/8-CompareToGasoline','png');
        saveas(f9,'../plots5/9-KeqbyT','png');
    end
    if(~supressplots(4))
        saveas(f10,'../plots5/10-SMRcompmol','png');
        saveas(f11,'../plots5/11-SMRcomp','png');
        saveas(f12,'../plots5/12-WGScomp','png');
        saveas(f13,'../plots5/13-ReformerComp','png');
    end
end
% toc(entireTime);

</originalCode>
   <m-file>me140_project5</m-file>
   <filename>/Users/Jon/Google Drive/Stanford/2015/Spring/140/Project4/git_2/me140_project5/me140_project5.m</filename>
   <outputdir>/Users/Jon/Google Drive/Stanford/2015/Spring/140/Project4/git_2/me140_project5/html</outputdir>
</mscript>